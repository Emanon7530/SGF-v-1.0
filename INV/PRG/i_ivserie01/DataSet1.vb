'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet1
    Inherits DataSet
    
    Private tableiventrdd As iventrddDataTable
    
    Private tableivseriem As ivseriemDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("iventrdd")) Is Nothing) Then
                Me.Tables.Add(New iventrddDataTable(ds.Tables("iventrdd")))
            End If
            If (Not (ds.Tables("ivseriem")) Is Nothing) Then
                Me.Tables.Add(New ivseriemDataTable(ds.Tables("ivseriem")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property iventrdd As iventrddDataTable
        Get
            Return Me.tableiventrdd
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ivseriem As ivseriemDataTable
        Get
            Return Me.tableivseriem
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("iventrdd")) Is Nothing) Then
            Me.Tables.Add(New iventrddDataTable(ds.Tables("iventrdd")))
        End If
        If (Not (ds.Tables("ivseriem")) Is Nothing) Then
            Me.Tables.Add(New ivseriemDataTable(ds.Tables("ivseriem")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableiventrdd = CType(Me.Tables("iventrdd"),iventrddDataTable)
        If (Not (Me.tableiventrdd) Is Nothing) Then
            Me.tableiventrdd.InitVars
        End If
        Me.tableivseriem = CType(Me.Tables("ivseriem"),ivseriemDataTable)
        If (Not (Me.tableivseriem) Is Nothing) Then
            Me.tableivseriem.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-DO")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableiventrdd = New iventrddDataTable
        Me.Tables.Add(Me.tableiventrdd)
        Me.tableivseriem = New ivseriemDataTable
        Me.Tables.Add(Me.tableivseriem)
    End Sub
    
    Private Function ShouldSerializeiventrdd() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeivseriem() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub iventrddRowChangeEventHandler(ByVal sender As Object, ByVal e As iventrddRowChangeEvent)
    
    Public Delegate Sub ivseriemRowChangeEventHandler(ByVal sender As Object, ByVal e As ivseriemRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class iventrddDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnentr_number As DataColumn
        
        Private columnitem_code As DataColumn
        
        Private columnitem_name As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnprov_code As DataColumn
        
        Private columnwhse_code As DataColumn
        
        Private columnline_no As DataColumn
        
        Private columnExpr1 As DataColumn
        
        Friend Sub New()
            MyBase.New("iventrdd")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property entr_numberColumn As DataColumn
            Get
                Return Me.columnentr_number
            End Get
        End Property
        
        Friend ReadOnly Property item_codeColumn As DataColumn
            Get
                Return Me.columnitem_code
            End Get
        End Property
        
        Friend ReadOnly Property item_nameColumn As DataColumn
            Get
                Return Me.columnitem_name
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property prov_codeColumn As DataColumn
            Get
                Return Me.columnprov_code
            End Get
        End Property
        
        Friend ReadOnly Property whse_codeColumn As DataColumn
            Get
                Return Me.columnwhse_code
            End Get
        End Property
        
        Friend ReadOnly Property line_noColumn As DataColumn
            Get
                Return Me.columnline_no
            End Get
        End Property
        
        Friend ReadOnly Property Expr1Column As DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As iventrddRow
            Get
                Return CType(Me.Rows(index),iventrddRow)
            End Get
        End Property
        
        Public Event iventrddRowChanged As iventrddRowChangeEventHandler
        
        Public Event iventrddRowChanging As iventrddRowChangeEventHandler
        
        Public Event iventrddRowDeleted As iventrddRowChangeEventHandler
        
        Public Event iventrddRowDeleting As iventrddRowChangeEventHandler
        
        Public Overloads Sub AddiventrddRow(ByVal row As iventrddRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddiventrddRow(ByVal entr_number As Integer, ByVal item_code As Integer, ByVal item_name As String, ByVal qty As Integer, ByVal prov_code As Integer, ByVal whse_code As Integer, ByVal line_no As Integer, ByVal Expr1 As Integer) As iventrddRow
            Dim rowiventrddRow As iventrddRow = CType(Me.NewRow,iventrddRow)
            rowiventrddRow.ItemArray = New Object() {entr_number, item_code, item_name, qty, prov_code, whse_code, line_no, Expr1}
            Me.Rows.Add(rowiventrddRow)
            Return rowiventrddRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As iventrddDataTable = CType(MyBase.Clone,iventrddDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New iventrddDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnentr_number = Me.Columns("entr_number")
            Me.columnitem_code = Me.Columns("item_code")
            Me.columnitem_name = Me.Columns("item_name")
            Me.columnqty = Me.Columns("qty")
            Me.columnprov_code = Me.Columns("prov_code")
            Me.columnwhse_code = Me.Columns("whse_code")
            Me.columnline_no = Me.Columns("line_no")
            Me.columnExpr1 = Me.Columns("Expr1")
        End Sub
        
        Private Sub InitClass()
            Me.columnentr_number = New DataColumn("entr_number", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnentr_number)
            Me.columnitem_code = New DataColumn("item_code", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_code)
            Me.columnitem_name = New DataColumn("item_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_name)
            Me.columnqty = New DataColumn("qty", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnprov_code = New DataColumn("prov_code", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprov_code)
            Me.columnwhse_code = New DataColumn("whse_code", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwhse_code)
            Me.columnline_no = New DataColumn("line_no", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnline_no)
            Me.columnExpr1 = New DataColumn("Expr1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExpr1)
            Me.columnentr_number.AllowDBNull = false
            Me.columnline_no.AllowDBNull = false
            Me.columnExpr1.AllowDBNull = false
        End Sub
        
        Public Function NewiventrddRow() As iventrddRow
            Return CType(Me.NewRow,iventrddRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New iventrddRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(iventrddRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.iventrddRowChangedEvent) Is Nothing) Then
                RaiseEvent iventrddRowChanged(Me, New iventrddRowChangeEvent(CType(e.Row,iventrddRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.iventrddRowChangingEvent) Is Nothing) Then
                RaiseEvent iventrddRowChanging(Me, New iventrddRowChangeEvent(CType(e.Row,iventrddRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.iventrddRowDeletedEvent) Is Nothing) Then
                RaiseEvent iventrddRowDeleted(Me, New iventrddRowChangeEvent(CType(e.Row,iventrddRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.iventrddRowDeletingEvent) Is Nothing) Then
                RaiseEvent iventrddRowDeleting(Me, New iventrddRowChangeEvent(CType(e.Row,iventrddRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveiventrddRow(ByVal row As iventrddRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class iventrddRow
        Inherits DataRow
        
        Private tableiventrdd As iventrddDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableiventrdd = CType(Me.Table,iventrddDataTable)
        End Sub
        
        Public Property entr_number As Integer
            Get
                Return CType(Me(Me.tableiventrdd.entr_numberColumn),Integer)
            End Get
            Set
                Me(Me.tableiventrdd.entr_numberColumn) = value
            End Set
        End Property
        
        Public Property item_code As Integer
            Get
                Try 
                    Return CType(Me(Me.tableiventrdd.item_codeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableiventrdd.item_codeColumn) = value
            End Set
        End Property
        
        Public Property item_name As String
            Get
                Try 
                    Return CType(Me(Me.tableiventrdd.item_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableiventrdd.item_nameColumn) = value
            End Set
        End Property
        
        Public Property qty As Integer
            Get
                Try 
                    Return CType(Me(Me.tableiventrdd.qtyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableiventrdd.qtyColumn) = value
            End Set
        End Property
        
        Public Property prov_code As Integer
            Get
                Try 
                    Return CType(Me(Me.tableiventrdd.prov_codeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableiventrdd.prov_codeColumn) = value
            End Set
        End Property
        
        Public Property whse_code As Integer
            Get
                Try 
                    Return CType(Me(Me.tableiventrdd.whse_codeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableiventrdd.whse_codeColumn) = value
            End Set
        End Property
        
        Public Property line_no As Integer
            Get
                Return CType(Me(Me.tableiventrdd.line_noColumn),Integer)
            End Get
            Set
                Me(Me.tableiventrdd.line_noColumn) = value
            End Set
        End Property
        
        Public Property Expr1 As Integer
            Get
                Return CType(Me(Me.tableiventrdd.Expr1Column),Integer)
            End Get
            Set
                Me(Me.tableiventrdd.Expr1Column) = value
            End Set
        End Property
        
        Public Function Isitem_codeNull() As Boolean
            Return Me.IsNull(Me.tableiventrdd.item_codeColumn)
        End Function
        
        Public Sub Setitem_codeNull()
            Me(Me.tableiventrdd.item_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isitem_nameNull() As Boolean
            Return Me.IsNull(Me.tableiventrdd.item_nameColumn)
        End Function
        
        Public Sub Setitem_nameNull()
            Me(Me.tableiventrdd.item_nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableiventrdd.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableiventrdd.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprov_codeNull() As Boolean
            Return Me.IsNull(Me.tableiventrdd.prov_codeColumn)
        End Function
        
        Public Sub Setprov_codeNull()
            Me(Me.tableiventrdd.prov_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iswhse_codeNull() As Boolean
            Return Me.IsNull(Me.tableiventrdd.whse_codeColumn)
        End Function
        
        Public Sub Setwhse_codeNull()
            Me(Me.tableiventrdd.whse_codeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class iventrddRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As iventrddRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As iventrddRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As iventrddRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ivseriemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnserie_number As DataColumn
        
        Private columnentr_number As DataColumn
        
        Private columnitem_code As DataColumn
        
        Private columnwhse_code As DataColumn
        
        Private columnprov_code As DataColumn
        
        Private columnserie_status As DataColumn
        
        Private columnftserial_no As DataColumn
        
        Friend Sub New()
            MyBase.New("ivseriem")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property serie_numberColumn As DataColumn
            Get
                Return Me.columnserie_number
            End Get
        End Property
        
        Friend ReadOnly Property entr_numberColumn As DataColumn
            Get
                Return Me.columnentr_number
            End Get
        End Property
        
        Friend ReadOnly Property item_codeColumn As DataColumn
            Get
                Return Me.columnitem_code
            End Get
        End Property
        
        Friend ReadOnly Property whse_codeColumn As DataColumn
            Get
                Return Me.columnwhse_code
            End Get
        End Property
        
        Friend ReadOnly Property prov_codeColumn As DataColumn
            Get
                Return Me.columnprov_code
            End Get
        End Property
        
        Friend ReadOnly Property serie_statusColumn As DataColumn
            Get
                Return Me.columnserie_status
            End Get
        End Property
        
        Friend ReadOnly Property ftserial_noColumn As DataColumn
            Get
                Return Me.columnftserial_no
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ivseriemRow
            Get
                Return CType(Me.Rows(index),ivseriemRow)
            End Get
        End Property
        
        Public Event ivseriemRowChanged As ivseriemRowChangeEventHandler
        
        Public Event ivseriemRowChanging As ivseriemRowChangeEventHandler
        
        Public Event ivseriemRowDeleted As ivseriemRowChangeEventHandler
        
        Public Event ivseriemRowDeleting As ivseriemRowChangeEventHandler
        
        Public Overloads Sub AddivseriemRow(ByVal row As ivseriemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddivseriemRow(ByVal serie_number As String, ByVal entr_number As Integer, ByVal item_code As Integer, ByVal whse_code As Integer, ByVal prov_code As Integer, ByVal serie_status As Integer, ByVal ftserial_no As Integer) As ivseriemRow
            Dim rowivseriemRow As ivseriemRow = CType(Me.NewRow,ivseriemRow)
            rowivseriemRow.ItemArray = New Object() {serie_number, entr_number, item_code, whse_code, prov_code, serie_status, ftserial_no}
            Me.Rows.Add(rowivseriemRow)
            Return rowivseriemRow
        End Function
        
        Public Function FindByserie_number(ByVal serie_number As String) As ivseriemRow
            Return CType(Me.Rows.Find(New Object() {serie_number}),ivseriemRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ivseriemDataTable = CType(MyBase.Clone,ivseriemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ivseriemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnserie_number = Me.Columns("serie_number")
            Me.columnentr_number = Me.Columns("entr_number")
            Me.columnitem_code = Me.Columns("item_code")
            Me.columnwhse_code = Me.Columns("whse_code")
            Me.columnprov_code = Me.Columns("prov_code")
            Me.columnserie_status = Me.Columns("serie_status")
            Me.columnftserial_no = Me.Columns("ftserial_no")
        End Sub
        
        Private Sub InitClass()
            Me.columnserie_number = New DataColumn("serie_number", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnserie_number)
            Me.columnentr_number = New DataColumn("entr_number", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnentr_number)
            Me.columnitem_code = New DataColumn("item_code", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitem_code)
            Me.columnwhse_code = New DataColumn("whse_code", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwhse_code)
            Me.columnprov_code = New DataColumn("prov_code", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprov_code)
            Me.columnserie_status = New DataColumn("serie_status", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnserie_status)
            Me.columnftserial_no = New DataColumn("ftserial_no", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnftserial_no)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnserie_number}, true))
            Me.columnserie_number.AllowDBNull = false
            Me.columnserie_number.Unique = true
            Me.columnitem_code.AllowDBNull = false
        End Sub
        
        Public Function NewivseriemRow() As ivseriemRow
            Return CType(Me.NewRow,ivseriemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ivseriemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ivseriemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ivseriemRowChangedEvent) Is Nothing) Then
                RaiseEvent ivseriemRowChanged(Me, New ivseriemRowChangeEvent(CType(e.Row,ivseriemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ivseriemRowChangingEvent) Is Nothing) Then
                RaiseEvent ivseriemRowChanging(Me, New ivseriemRowChangeEvent(CType(e.Row,ivseriemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ivseriemRowDeletedEvent) Is Nothing) Then
                RaiseEvent ivseriemRowDeleted(Me, New ivseriemRowChangeEvent(CType(e.Row,ivseriemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ivseriemRowDeletingEvent) Is Nothing) Then
                RaiseEvent ivseriemRowDeleting(Me, New ivseriemRowChangeEvent(CType(e.Row,ivseriemRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveivseriemRow(ByVal row As ivseriemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ivseriemRow
        Inherits DataRow
        
        Private tableivseriem As ivseriemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableivseriem = CType(Me.Table,ivseriemDataTable)
        End Sub
        
        Public Property serie_number As String
            Get
                Return CType(Me(Me.tableivseriem.serie_numberColumn),String)
            End Get
            Set
                Me(Me.tableivseriem.serie_numberColumn) = value
            End Set
        End Property
        
        Public Property entr_number As Integer
            Get
                Try 
                    Return CType(Me(Me.tableivseriem.entr_numberColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableivseriem.entr_numberColumn) = value
            End Set
        End Property
        
        Public Property item_code As Integer
            Get
                Return CType(Me(Me.tableivseriem.item_codeColumn),Integer)
            End Get
            Set
                Me(Me.tableivseriem.item_codeColumn) = value
            End Set
        End Property
        
        Public Property whse_code As Integer
            Get
                Try 
                    Return CType(Me(Me.tableivseriem.whse_codeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableivseriem.whse_codeColumn) = value
            End Set
        End Property
        
        Public Property prov_code As Integer
            Get
                Try 
                    Return CType(Me(Me.tableivseriem.prov_codeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableivseriem.prov_codeColumn) = value
            End Set
        End Property
        
        Public Property serie_status As Integer
            Get
                Try 
                    Return CType(Me(Me.tableivseriem.serie_statusColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableivseriem.serie_statusColumn) = value
            End Set
        End Property
        
        Public Property ftserial_no As Integer
            Get
                Try 
                    Return CType(Me(Me.tableivseriem.ftserial_noColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableivseriem.ftserial_noColumn) = value
            End Set
        End Property
        
        Public Function Isentr_numberNull() As Boolean
            Return Me.IsNull(Me.tableivseriem.entr_numberColumn)
        End Function
        
        Public Sub Setentr_numberNull()
            Me(Me.tableivseriem.entr_numberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iswhse_codeNull() As Boolean
            Return Me.IsNull(Me.tableivseriem.whse_codeColumn)
        End Function
        
        Public Sub Setwhse_codeNull()
            Me(Me.tableivseriem.whse_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isprov_codeNull() As Boolean
            Return Me.IsNull(Me.tableivseriem.prov_codeColumn)
        End Function
        
        Public Sub Setprov_codeNull()
            Me(Me.tableivseriem.prov_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isserie_statusNull() As Boolean
            Return Me.IsNull(Me.tableivseriem.serie_statusColumn)
        End Function
        
        Public Sub Setserie_statusNull()
            Me(Me.tableivseriem.serie_statusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isftserial_noNull() As Boolean
            Return Me.IsNull(Me.tableivseriem.ftserial_noColumn)
        End Function
        
        Public Sub Setftserial_noNull()
            Me(Me.tableivseriem.ftserial_noColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ivseriemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ivseriemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ivseriemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ivseriemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
