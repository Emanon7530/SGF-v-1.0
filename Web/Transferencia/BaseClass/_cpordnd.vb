
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class OleDbEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.7)

Imports System
Imports System.Data
Imports System.Data.OleDb
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public Class _cpordnd
    Inherits OleDbEntity

    Public Sub New()
        Me.QuerySource = "cpordnd"
        Me.MappingName = "cpordnd"
    End Sub

    '=================================================================
    '  Public Overrides Sub AddNew()
    '=================================================================
    '
    '=================================================================
    Public Overrides Sub AddNew()
        MyBase.AddNew()

    End Sub

    Public Overrides Sub FlushData()
        Me._whereClause = Nothing
        Me._aggregateClause = Nothing
        MyBase.FlushData()
    End Sub


    Public Overrides Function GetAutoKeyColumn() As String
        Return ""
    End Function

    '=================================================================
    '  	Public Function LoadAll() As Boolean
    '=================================================================
    '  Loads all of the records in the database, and sets the currentRow to the first row
    '=================================================================
    Public Function LoadAll() As Boolean

        Dim parameters As ListDictionary = Nothing


        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_cpordndLoadAll]", parameters)

    End Function

    '=================================================================
    ' Public Overridable Function LoadByPrimaryKey()  As Boolean
    '=================================================================
    '  Loads a single row of via the primary key
    '=================================================================
    Public Overridable Function LoadByPrimaryKey(ByVal ordn_serial As Integer, ByVal item_code As String) As Boolean

        Dim parameters As ListDictionary = New ListDictionary
        parameters.Add(_cpordnd.Parameters.ordn_serial, ordn_serial)
        parameters.Add(_cpordnd.Parameters.item_code, item_code)
                

        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_cpordndLoadByPrimaryKey]", parameters)

    End Function

#Region "Parameters"
    Protected Class Parameters

        Public Shared ReadOnly Property ordn_serial() As OleDbParameter
            Get
                Return New OleDbParameter("@ordn_serial", OleDbType.Integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property whse_code() As OleDbParameter
            Get
                Return New OleDbParameter("@whse_code", OleDbType.VarChar, 5)
            End Get
        End Property

        Public Shared ReadOnly Property item_code() As OleDbParameter
            Get
                Return New OleDbParameter("@item_code", OleDbType.VarChar, 10)
            End Get
        End Property

        Public Shared ReadOnly Property ref_code() As OleDbParameter
            Get
                Return New OleDbParameter("@ref_code", OleDbType.integer,0)
            End Get
        End Property

        Public Shared ReadOnly Property qty() As OleDbParameter
            Get
                Return New OleDbParameter("@qty", OleDbType.integer,0)
            End Get
        End Property

        Public Shared ReadOnly Property costo() As OleDbParameter
            Get
                Return New OleDbParameter("@costo", OleDbType.decimal,12,2)
            End Get
        End Property

        Public Shared ReadOnly Property itbis() As OleDbParameter
            Get
                Return New OleDbParameter("@itbis", OleDbType.decimal,12,2)
            End Get
        End Property

        Public Shared ReadOnly Property promedio() As OleDbParameter
            Get
                Return New OleDbParameter("@promedio", OleDbType.decimal,18,2)
            End Get
        End Property

        Public Shared ReadOnly Property sugerida() As OleDbParameter
            Get
                Return New OleDbParameter("@sugerida", OleDbType.decimal,18,2)
            End Get
        End Property

        Public Shared ReadOnly Property diasventa() As OleDbParameter
            Get
                Return New OleDbParameter("@diasventa", OleDbType.integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property reorden() As OleDbParameter
            Get
                Return New OleDbParameter("@reorden", OleDbType.decimal,12, 0)
            End Get
        End Property

        Public Shared ReadOnly Property unit_code() As OleDbParameter
            Get
                Return New OleDbParameter("@unit_code", OleDbType.varchar, 5)
            End Get
        End Property

        Public Shared ReadOnly Property existencia() As OleDbParameter
            Get
                Return New OleDbParameter("@existencia", OleDbType.Decimal, 10, 2)
            End Get
        End Property
        Public Shared ReadOnly Property suc_code() As OleDbParameter
            Get
                Return New OleDbParameter("@suc_code", OleDbType.Integer, 0)
            End Get
        End Property

    End Class
#End Region

#Region "ColumnNames"
    Public Class ColumnNames

        Public Const ordn_serial As String = "ordn_serial"
	    public const whse_code as string = "whse_code"
	    Public Const item_code As String = "item_code"
	    public const ref_code as string = "ref_code"
	    public const Qty as string = "qty"
	    public const costo as string = "costo"
	    public const itbis as string = "itbis"
	    public const promedio as string ="promedio"
	    public const sugerida as string ="sugerida"
	    Public Const diasventa As String = "diasventa"
        Public Const reorden As String = "reorden"
        Public Const unit_code As String = "unit_code"
        Public Const existencia As String = "existencia"
        Public Const suc_code As String = "suc_code"
        
        Public Shared Function ToPropertyName(ByVal columnName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(ordn_serial) = _cpordnd.PropertyNames.ordn_serial
                ht(whse_code) = _cpordnd.PropertyNames.whse_code
                ht(item_code) = _cpordnd.PropertyNames.item_code
                ht(ref_code) = _cpordnd.PropertyNames.ref_code
	            ht(Qty) = _cpordnd.PropertyNames.Qty
	            ht(costo) = _cpordnd.PropertyNames.costo
	            ht(itbis) = _cpordnd.PropertyNames.itbis
	            ht(promedio) = _cpordnd.PropertyNames.sugerida
	            ht(sugerida) = _cpordnd.PropertyNames.sugerida
                ht(diasventa) = _cpordnd.PropertyNames.diasventa
                ht(reorden) = _cpordnd.PropertyNames.reorden
                ht(unit_code) = _cpordnd.PropertyNames.unit_code
                ht(existencia) = _cpordnd.PropertyNames.existencia
                ht(suc_code) = _cpordnd.PropertyNames.suc_code
            End If

            Return CType(ht(columnName), String)

        End Function

        Private Shared ht As Hashtable = Nothing
    End Class
#End Region

#Region "PropertyNames"
    Public Class PropertyNames

        Public Const ordn_serial As String = "ordn_serial"
        Public Const whse_code As String = "whse_code"
        Public Const item_code As String = "item_code"
        Public Const ref_code As String = "ref_code"
        Public Const Qty As String = "Qty"
        Public Const costo As String = "costo"
        Public Const itbis As String = "itbis"
        Public Const promedio As String = "promedio"
        Public Const sugerida As String = "sugerida"
        Public Const diasventa As String = "diasventa"
        Public Const reorden As String = "reorden"
        Public Const unit_code As String = "unit_code"
        Public Const existencia As String = "existencia"
        Public Const suc_code As String = "suc_code"
        
        Public Shared Function ToColumnName(ByVal propertyName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(ordn_serial) = _cpordnd.PropertyNames.ordn_serial
                ht(whse_code) = _cpordnd.PropertyNames.whse_code
                ht(item_code) = _cpordnd.PropertyNames.item_code
                ht(ref_code) = _cpordnd.PropertyNames.ref_code
	            ht(Qty) = _cpordnd.PropertyNames.Qty
	            ht(costo) = _cpordnd.PropertyNames.costo
	            ht(itbis) = _cpordnd.PropertyNames.itbis
	            ht(promedio) = _cpordnd.PropertyNames.sugerida
	            ht(sugerida) = _cpordnd.PropertyNames.sugerida
                ht(diasventa) = _cpordnd.PropertyNames.diasventa
                ht(reorden) = _cpordnd.PropertyNames.reorden
                ht(unit_code) = _cpordnd.PropertyNames.unit_code
                ht(existencia) = _cpordnd.PropertyNames.existencia
                ht(suc_code) = _cpordnd.PropertyNames.suc_code

            End If

            Return CType(ht(propertyName), String)

        End Function

        Private Shared ht As Hashtable = Nothing

    End Class
#End Region

#Region "StringPropertyNames"
    Public Class StringPropertyNames

        Public Const ordn_serial As String = "ordn_serial"
        Public Const whse_code As String = "whse_code"
        Public Const item_code As String = "item_code"
        Public Const ref_code As String = "ref_code"
        Public Const Qty As String = "Qty"
        Public Const costo As String = "costo"
        Public Const itbis As String = "itbis"
        Public Const promedio As String = "promedio"
        Public Const sugerida As String = "sugerida"
        Public Const diasventa As String = "diasventa"
        Public Const reorden As String = "reorden"
        Public Const unit_code As String = "unit_code"
        Public Const existencia As String = "existencia"
        Public Const suc_code As String = "suc_code"
    End Class
#End Region

#Region "Properties"
    Public Overridable Property ordn_serial() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.ordn_serial)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.ordn_serial, Value)
        End Set
    End Property

    Public Overridable Property whse_code() As integer
        Get
            Return MyBase.GetString(ColumnNames.whse_code)
        End Get
        Set(ByVal Value As integer)
            MyBase.SetString(ColumnNames.whse_code, Value)
        End Set
    End Property

    Public Overridable Property item_code() As String
        Get
            Return MyBase.GetString(ColumnNames.item_code)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.item_code, Value)
        End Set
    End Property

    Public Overridable Property ref_code() As integer
        Get
            Return MyBase.GetString(ColumnNames.ref_code)
        End Get
        Set(ByVal Value As integer)
            MyBase.SetString(ColumnNames.ref_code, Value)
        End Set
    End Property

    Public Overridable Property qty() As integer
        Get
            Return MyBase.GetString(ColumnNames.qty)
        End Get
        Set(ByVal Value As integer)
            MyBase.SetString(ColumnNames.qty, Value)
        End Set
    End Property

    Public Overridable Property costo() As integer
        Get
            Return MyBase.GetString(ColumnNames.costo)
        End Get
        Set(ByVal Value As integer)
            MyBase.SetString(ColumnNames.costo, Value)
        End Set
    End Property

    Public Overridable Property itbis() As decimal
        Get
            Return MyBase.GetString(ColumnNames.itbis)
        End Get
        Set(ByVal Value As decimal)
            MyBase.SetString(ColumnNames.itbis, Value)
        End Set
    End Property

    Public Overridable Property promedio() As decimal
        Get
            Return MyBase.GetString(ColumnNames.promedio)
        End Get
        Set(ByVal Value As decimal)
            MyBase.SetString(ColumnNames.promedio, Value)
        End Set
    End Property

    Public Overridable Property sugerida() As decimal
        Get
            Return MyBase.GetString(ColumnNames.sugerida)
        End Get
        Set(ByVal Value As decimal)
            MyBase.SetString(ColumnNames.sugerida, Value)
        End Set
    End Property

    Public Overridable Property diasventa() As String
        Get
            Return MyBase.GetString(ColumnNames.diasventa)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.diasventa, Value)
        End Set
    End Property

    Public Overridable Property reorden() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.reorden)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.reorden, Value)
        End Set
    End Property

    Public Overridable Property unit_code() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.unit_code)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.unit_code, Value)
        End Set
    End Property

    Public Overridable Property existencia() As Decimal
        Get
            Return MyBase.GetDecimal(ColumnNames.existencia)
        End Get
        Set(ByVal Value As Decimal)
            MyBase.SetDecimal(ColumnNames.existencia, Value)
        End Set
    End Property
    Public Overridable Property suc_code() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.suc_code)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.suc_code, Value)
        End Set
    End Property

#End Region

#Region "String Properties"

    Public Overridable Property s_ordn_serial() As String
        Get
            If Me.IsColumnNull(ColumnNames.ordn_serial) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.ordn_serial)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.ordn_serial)
            Else
                Me.ordn_serial = MyBase.SetIntegerAsString(ColumnNames.ordn_serial, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_whse_code() As integer
        Get
            If Me.IsColumnNull(ColumnNames.whse_code) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.whse_code)
            End If
        End Get
        Set(ByVal Value As integer)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.whse_code)
            Else
                Me.whse_code = MyBase.SetStringAsString(ColumnNames.whse_code, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_item_code() As String
        Get
            If Me.IsColumnNull(ColumnNames.item_code) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.item_code)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.item_code)
            Else
                Me.item_code = MyBase.SetStringAsString(ColumnNames.item_code, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_ref_code() As integer
        Get
            If Me.IsColumnNull(ColumnNames.ref_code) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.ref_code)
            End If
        End Get
        Set(ByVal Value As integer)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.ref_code)
            Else
                Me.ref_code = MyBase.SetStringAsString(ColumnNames.ref_code, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_qty() As integer
        Get
            If Me.IsColumnNull(ColumnNames.qty) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.qty)
            End If
        End Get
        Set(ByVal Value As integer)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.qty)
            Else
                Me.qty = MyBase.SetStringAsString(ColumnNames.qty, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_costo() As decimal
        Get
            If Me.IsColumnNull(ColumnNames.costo) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.costo)
            End If
        End Get
        Set(ByVal Value As decimal)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.costo)
            Else
                Me.costo = MyBase.SetStringAsString(ColumnNames.costo, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_itbis() As decimal
        Get
            If Me.IsColumnNull(ColumnNames.itbis) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.itbis)
            End If
        End Get
        Set(ByVal Value As decimal)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.itbis)
            Else
                Me.itbis = MyBase.SetStringAsString(ColumnNames.itbis, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_promedio() As decimal
        Get
            If Me.IsColumnNull(ColumnNames.promedio) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.promedio)
            End If
        End Get
        Set(ByVal Value As decimal)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.promedio)
            Else
                Me.promedio = MyBase.SetStringAsString(ColumnNames.promedio, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_sugerida() As decimal
        Get
            If Me.IsColumnNull(ColumnNames.sugerida) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.sugerida)
            End If
        End Get
        Set(ByVal Value As decimal)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.sugerida)
            Else
                Me.sugerida = MyBase.SetStringAsString(ColumnNames.sugerida, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_diasventa() As integer
        Get
            If Me.IsColumnNull(ColumnNames.diasventa) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.diasventa)
            End If
        End Get
        Set(ByVal Value As integer)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.diasventa)
            Else
                Me.diasventa = MyBase.SetStringAsString(ColumnNames.diasventa, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_reorden() As integer
        Get
            If Me.IsColumnNull(ColumnNames.reorden) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.reorden)
            End If
        End Get
        Set(ByVal Value As integer)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.reorden)
            Else
                Me.reorden = MyBase.SetIntegerAsString(ColumnNames.reorden, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_unit_code() As String
        Get
            If Me.IsColumnNull(ColumnNames.unit_code) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.unit_code)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.unit_code)
            Else
                Me.unit_code = MyBase.SetIntegerAsString(ColumnNames.unit_code, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_existencia() As integer
        Get
            If Me.IsColumnNull(ColumnNames.existencia) Then
                Return String.Empty
            Else
                Return MyBase.GetDecimalAsString(ColumnNames.existencia)
            End If
        End Get
        Set(ByVal Value As integer)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.existencia)
            Else
                Me.existencia = MyBase.SetDecimalAsString(ColumnNames.existencia, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_suc_code() As integer
        Get
            If Me.IsColumnNull(ColumnNames.suc_code) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.suc_code)
            End If
        End Get
        Set(ByVal Value As integer)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.suc_code)
            Else
                Me.suc_code = MyBase.SetIntegerAsString(ColumnNames.suc_code, Value)
            End If
        End Set
    End Property

#End Region

#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffWhereParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffWhereParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "TearOff's"
        Public Class TearOffWhereParameter

            Public Sub New(ByVal clause As WhereClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property ordn_serial() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.ordn_serial, Parameters.ordn_serial)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property whse_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.whse_code, Parameters.whse_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property item_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.item_code, Parameters.item_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ref_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.ref_code, Parameters.ref_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property Qty() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.Qty, Parameters.Qty)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property costo() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.costo, Parameters.costo)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property itbis() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.itbis, Parameters.itbis)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
                
            Public ReadOnly Property promedio() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.promedio, Parameters.promedio)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property sugerida() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.sugerida, Parameters.sugerida)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            
            Public ReadOnly Property diasventa() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.diasventa, Parameters.diasventa)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property reorden() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.reorden, Parameters.reorden)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property unit_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.unit_code, Parameters.unit_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property existencia() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.existencia, Parameters.existencia)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property suc_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.suc_code, Parameters.suc_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Private _clause As WhereClause
        End Class
#End Region

        Public ReadOnly Property ordn_serial() As WhereParameter
            Get
                If _ordn_serial_W Is Nothing Then
                    _ordn_serial_W = TearOff.ordn_serial
                End If
                Return _ordn_serial_W
            End Get
        End Property

        Public ReadOnly Property whse_code() As WhereParameter
            Get
                If _whse_code_W Is Nothing Then
                    _whse_code_W = TearOff.whse_code
                End If
                Return _whse_code_W
            End Get
        End Property

        Public ReadOnly Property item_code() As WhereParameter
            Get
                If _item_code_W Is Nothing Then
                    _item_code_W = TearOff.item_code
                End If
                Return _item_code_W
            End Get
        End Property

        Public ReadOnly Property ref_code() As WhereParameter
            Get
                If _ref_code_W Is Nothing Then
                    _ref_code_W = TearOff.ref_code
                End If
                Return _ref_code_W
            End Get
        End Property

        Public ReadOnly Property Qty() As WhereParameter
            Get
                If _Qty_W Is Nothing Then
                    _Qty_W = TearOff.Qty
                End If
                Return _Qty_W
            End Get
        End Property

        Public ReadOnly Property costo() As WhereParameter
            Get
                If _costo_W Is Nothing Then
                    _costo_W = TearOff.costo
                End If
                Return _costo_W
            End Get
        End Property

        Public ReadOnly Property itbis() As WhereParameter
            Get
                If _itbis_W Is Nothing Then
                    _itbis_W = TearOff.itbis
                End If
                Return _itbis_W
            End Get
        End Property

        Public ReadOnly Property promedio() As WhereParameter
            Get
                If _promedio_W Is Nothing Then
                    _promedio_W = TearOff.promedio
                End If
                Return _promedio_W
            End Get
        End Property

        Public ReadOnly Property sugerida() As WhereParameter
            Get
                If _sugerida_W Is Nothing Then
                    _sugerida_W = TearOff.sugerida
                End If
                Return _sugerida_W
            End Get
        End Property

        Public ReadOnly Property diasventa() As WhereParameter
            Get
                If _diasventa_W Is Nothing Then
                    _diasventa_W = TearOff.diasventa
                End If
                Return _diasventa_W
            End Get
        End Property

        Public ReadOnly Property reorden() As WhereParameter
            Get
                If _reorden_W Is Nothing Then
                    _reorden_W = TearOff.reorden
                End If
                Return _reorden_W
            End Get
        End Property

        Public ReadOnly Property unit_code() As WhereParameter
            Get
                If _unit_code_W Is Nothing Then
                    _unit_code_W = TearOff.unit_code
                End If
                Return _unit_code_W
            End Get
        End Property

        Public ReadOnly Property existencia() As WhereParameter
            Get
                If _existencia_W Is Nothing Then
                    _existencia_W = TearOff.existencia
                End If
                Return _existencia_W
            End Get
        End Property
        Public ReadOnly Property suc_code() As WhereParameter
            Get
                If _suc_code_W Is Nothing Then
                    _suc_code_W = TearOff.suc_code
                End If
                Return _suc_code_W
            End Get
        End Property

        Private _ordn_serial_W As WhereParameter = Nothing
        Private _whse_code_W As WhereParameter = Nothing
        Private _item_code_W As WhereParameter = Nothing
        Private _ref_code_W As WhereParameter = Nothing
        Private _qty_W As WhereParameter = Nothing
        Private _costo_W As WhereParameter = Nothing
        Private _itbis_W As WhereParameter = Nothing
        Private _promedio_W As WhereParameter = Nothing
        Private _sugerida_W As WhereParameter = Nothing
        Private _diasventa_W As WhereParameter = Nothing
        Private _reorden_W As WhereParameter = Nothing
        Private _unit_code_W As WhereParameter = Nothing
        Private _existencia_W As WhereParameter = Nothing
        Private _suc_code_W As WhereParameter = Nothing

        Public Sub WhereClauseReset()

            _ordn_serial_W = Nothing
            _whse_code_W = Nothing
            _item_code_W = Nothing  
            _ref_code_W = Nothing
            _qty_W = Nothing
            _costo_W = Nothing
            _itbis_W = Nothing
            _promedio_W = Nothing
            _sugerida_W = Nothing
            _diasventa_W = Nothing
            _reorden_W = Nothing
            _unit_code_W = Nothing
            _existencia_W = Nothing
            _suc_code_W = Nothing
            Me._entity.Query.FlushWhereParameters()
        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffWhereParameter
    End Class

    Public ReadOnly Property Where() As WhereClause
        Get
            If _whereClause Is Nothing Then
                _whereClause = New WhereClause(Me)
            End If

            Return _whereClause
        End Get
    End Property

    Private _whereClause As WhereClause = Nothing
#End Region

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffAggregateParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffAggregateParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "AggregateParameter TearOff's"
        Public Class TearOffAggregateParameter

            Public Sub New(ByVal clause As AggregateClause)
                Me._clause = clause
            End Sub

            Public ReadOnly Property ordn_serial() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ordn_serial, Parameters.ordn_serial)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property whse_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.whse_code, Parameters.whse_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property item_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.item_code, Parameters.item_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ref_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ref_code, Parameters.ref_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property qty() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.qty, Parameters.qty)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property costo() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.costo, Parameters.costo)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property itbis() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.itbis, Parameters.itbis)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property promedio() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.promedio, Parameters.promedio)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property sugerida() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.sugerida, Parameters.sugerida)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property diasventa() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.diasventa, Parameters.diasventa)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property reorden() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.reorden, Parameters.reorden)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property unit_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.unit_code, Parameters.unit_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property existencia() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.existencia, Parameters.existencia)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property suc_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.suc_code, Parameters.suc_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Private _clause As AggregateClause
        End Class
#End Region

        Public ReadOnly Property ordn_serial() As AggregateParameter
            Get
                If _ordn_serial_W Is Nothing Then
                    _ordn_serial_W = TearOff.ordn_serial
                End If
                Return _ordn_serial_W
            End Get
        End Property

        Public ReadOnly Property whse_code() As AggregateParameter
            Get
                If _whse_code_W Is Nothing Then
                    _whse_code_W = TearOff.whse_code
                End If
                Return _whse_code_W
            End Get
        End Property

        Public ReadOnly Property item_code() As AggregateParameter
            Get
                If _item_code_W Is Nothing Then
                    _item_code_W = TearOff.item_code
                End If
                Return _item_code_W
            End Get
        End Property

        Public ReadOnly Property ref_code() As AggregateParameter
            Get
                If _ref_code_W Is Nothing Then
                    _ref_code_W = TearOff.ref_code
                End If
                Return _ref_code_W
            End Get
        End Property

        Public ReadOnly Property qty() As AggregateParameter
            Get
                If _qty_W Is Nothing Then
                    _qty_W = TearOff.qty
                End If
                Return _qty_W
            End Get
        End Property

        Public ReadOnly Property costo() As AggregateParameter
            Get
                If _costo_W Is Nothing Then
                    _costo_W = TearOff.costo
                End If
                Return _costo_W
            End Get
        End Property

        Public ReadOnly Property itbis() As AggregateParameter
            Get
                If _itbis_W Is Nothing Then
                    _itbis_W = TearOff.itbis
                End If
                Return _itbis_W
            End Get
        End Property

        Public ReadOnly Property promedio() As AggregateParameter
            Get
                If _promedio_W Is Nothing Then
                    _promedio_W = TearOff.promedio
                End If
                Return _promedio_W
            End Get
        End Property

        Public ReadOnly Property sugerida() As AggregateParameter
            Get
                If _sugerida_W Is Nothing Then
                    _sugerida_W = TearOff.sugerida
                End If
                Return _sugerida_W
            End Get
        End Property

        Public ReadOnly Property diasventa() As AggregateParameter
            Get
                If _diasventa_W Is Nothing Then
                    _diasventa_W = TearOff.diasventa
                End If
                Return _diasventa_W
            End Get
        End Property

        Public ReadOnly Property reorden() As AggregateParameter
            Get
                If _reorden_W Is Nothing Then
                    _reorden_W = TearOff.reorden
                End If
                Return _reorden_W
            End Get
        End Property

        Public ReadOnly Property unit_code() As AggregateParameter
            Get
                If _unit_code_W Is Nothing Then
                    _unit_code_W = TearOff.unit_code
                End If
                Return _unit_code_W
            End Get
        End Property

        Public ReadOnly Property existencia() As AggregateParameter
            Get
                If _existencia_W Is Nothing Then
                    _existencia_W = TearOff.existencia
                End If
                Return _existencia_W
            End Get
        End Property
        Public ReadOnly Property suc_code() As AggregateParameter
            Get
                If _suc_code_W Is Nothing Then
                    _suc_code_W = TearOff.suc_code
                End If
                Return _suc_code_W
            End Get
        End Property

        Private _ordn_serial_W As AggregateParameter = Nothing
        Private _whse_code_W As AggregateParameter = Nothing
        Private _item_code_W As AggregateParameter = Nothing
        Private _ref_code_W As AggregateParameter = Nothing
        Private _qty_W As AggregateParameter = Nothing
        Private _costo_W As AggregateParameter = Nothing
        Private _itbis_W As AggregateParameter = Nothing
        Private _promedio_W As AggregateParameter = Nothing
        Private _sugerida_W As AggregateParameter = Nothing
        Private _diasventa_W As AggregateParameter = Nothing
        Private _reorden_W As AggregateParameter = Nothing
        Private _unit_code_W As AggregateParameter = Nothing
        Private _existencia_W As AggregateParameter = Nothing
        Private _suc_code_W As AggregateParameter = Nothing

        Public Sub AggregateClauseReset()

            _ordn_serial_W = Nothing
            _whse_code_W = Nothing
            _item_code_W = Nothing
            _ref_code_W = Nothing
            _qty_W = Nothing
            _costo_W = Nothing
            _itbis_W = Nothing
            _promedio_W = Nothing
            _sugerida_W = Nothing
            _diasventa_W = Nothing
            _reorden_W = Nothing
            _unit_code_W = Nothing
            _existencia_W = Nothing
            _suc_code_W = Nothing
            Me._entity.Query.FlushAggregateParameters()
        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffAggregateParameter
    End Class

    Public ReadOnly Property Aggregate() As AggregateClause
        Get
            If _aggregateClause Is Nothing Then
                _aggregateClause = New AggregateClause(Me)
            End If

            Return _aggregateClause
        End Get
    End Property

    Private _aggregateClause As AggregateClause = Nothing
#End Region

    Protected Overrides Function GetInsertCommand() As IDbCommand

        Dim cmd As OleDbCommand = New OleDbCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_cpordndInsert]"

        CreateParameters(cmd)

        Return cmd

    End Function

    Protected Overrides Function GetUpdateCommand() As IDbCommand

        Dim cmd As OleDbCommand = New OleDbCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_cpordndUpdate]"

        CreateParameters(cmd)

        Return cmd

    End Function

    Protected Overrides Function GetDeleteCommand() As IDbCommand

        Dim cmd As OleDbCommand = New OleDbCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_cpordndDelete]"

        Dim p As OleDbParameter
        p = cmd.Parameters.Add(Parameters.ordn_serial)
        p.SourceColumn = ColumnNames.ordn_serial
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.item_code)
        p.SourceColumn = ColumnNames.item_code
        p.SourceVersion = DataRowVersion.Current


        Return cmd

    End Function

    Private Sub CreateParameters(ByVal cmd As OleDbCommand)

        Dim p As OleDbParameter
        p = cmd.Parameters.Add(Parameters.ordn_serial)
        p.SourceColumn = ColumnNames.ordn_serial
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.whse_code)
        p.SourceColumn = ColumnNames.whse_code
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.item_code)
        p.SourceColumn = ColumnNames.item_code
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.ref_code)
        p.SourceColumn = ColumnNames.ref_code
        p.SourceVersion = DataRowVersion.Current
    
        p = cmd.Parameters.Add(Parameters.qty)
        p.SourceColumn = ColumnNames.qty
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.itbis)
        p.SourceColumn = ColumnNames.itbis
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.promedio)
        p.SourceColumn = ColumnNames.promedio
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.sugerida)
        p.SourceColumn = ColumnNames.sugerida
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.costo)
        p.SourceColumn = ColumnNames.costo
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.diasventa)
        p.SourceColumn = ColumnNames.diasventa
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.reorden)
        p.SourceColumn = ColumnNames.reorden
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.unit_code)
        p.SourceColumn = ColumnNames.unit_code
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.existencia)
        p.SourceColumn = ColumnNames.existencia
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.suc_code)
        p.SourceColumn = ColumnNames.suc_code
        p.SourceVersion = DataRowVersion.Current

    End Sub
   
End Class



