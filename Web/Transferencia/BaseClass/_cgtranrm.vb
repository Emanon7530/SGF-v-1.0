
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class OleDbEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.7)

Imports System
Imports System.Data
Imports System.Data.OleDb
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public Class _cgtranrm

	Inherits OleDbEntity

		Public Sub New() 
			Me.QuerySource = "cgtranrm"
			Me.MappingName = "cgtranrm"
		End Sub

	'=================================================================
	'  Public Overrides Sub AddNew()
	'=================================================================
	'
	'=================================================================
	Public Overrides Sub AddNew()
		MyBase.AddNew()
				
	End Sub
	
	Public Overrides Sub FlushData()
		Me._whereClause = nothing
		Me._aggregateClause = nothing		
		MyBase.FlushData()
	End Sub
	
	
	Public Overrides Function GetAutoKeyColumn() As String
			Return ""
	End Function
	
	'=================================================================
	'  	Public Function LoadAll() As Boolean
	'=================================================================
	'  Loads all of the records in the database, and sets the currentRow to the first row
	'=================================================================
	Public Function LoadAll() As Boolean
	
		Dim parameters As ListDictionary = Nothing
		
		
    	Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_cgtranrmLoadAll]", parameters)
		
	End Function

	'=================================================================
	' Public Overridable Function LoadByPrimaryKey()  As Boolean
	'=================================================================
	'  Loads a single row of via the primary key
	'=================================================================
    Public Overridable Function LoadByPrimaryKey(ByVal tranr_serial As Integer, ByVal suc_code As Integer) As Boolean
        Dim parameters As ListDictionary = New ListDictionary
        parameters.Add(_cgtranrm.Parameters.tranr_serial, tranr_serial)
        parameters.Add(_cgtranrm.Parameters.suc_code, suc_code)

        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_cgtranrmLoadByPrimaryKey]", parameters)

    End Function

#Region "Parameters"
    Protected Class Parameters

        Public Shared ReadOnly Property tranr_serial() As OleDbParameter
            Get
                Return New OleDbParameter("@tranr_serial", OleDbType.Integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property tran_type() As OleDbParameter
            Get
                Return New OleDbParameter("@tran_type", OleDbType.Char, 3)
            End Get
        End Property

        Public Shared ReadOnly Property perdr_year() As OleDbParameter
            Get
                Return New OleDbParameter("@perdr_year", OleDbType.Integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property perdr_num() As OleDbParameter
            Get
                Return New OleDbParameter("@perdr_num", OleDbType.Integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property orign_code() As OleDbParameter
            Get
                Return New OleDbParameter("@orign_code", OleDbType.Char, 3)
            End Get
        End Property

        Public Shared ReadOnly Property tran_number() As OleDbParameter
            Get
                Return New OleDbParameter("@tran_number", OleDbType.VarChar, 10)
            End Get
        End Property

        Public Shared ReadOnly Property tran_date() As OleDbParameter
            Get
                Return New OleDbParameter("@tran_date", OleDbType.DBDate, 0)
            End Get
        End Property

        Public Shared ReadOnly Property date_created() As OleDbParameter
            Get
                Return New OleDbParameter("@date_created", OleDbType.DBDate, 0)
            End Get
        End Property

        Public Shared ReadOnly Property tran_descr() As OleDbParameter
            Get
                Return New OleDbParameter("@tran_descr", OleDbType.VarChar, 80)
            End Get
        End Property

        Public Shared ReadOnly Property tran_status() As OleDbParameter
            Get
                Return New OleDbParameter("@tran_status", OleDbType.Integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property userid() As OleDbParameter
            Get
                Return New OleDbParameter("@userid", OleDbType.VarChar, 18)
            End Get
        End Property

        Public Shared ReadOnly Property tran_reverse() As OleDbParameter
            Get
                Return New OleDbParameter("@tran_reverse", OleDbType.Integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property tran_refer() As OleDbParameter
            Get
                Return New OleDbParameter("@tran_refer", OleDbType.VarChar, 60)
            End Get
        End Property

        Public Shared ReadOnly Property suc_code() As OleDbParameter
            Get
                Return New OleDbParameter("@suc_code", OleDbType.Integer, 0)
            End Get
        End Property

    End Class
#End Region

#Region "ColumnNames"
    Public Class ColumnNames

        Public Const tranr_serial As String = "tranr_serial"
        Public Const tran_type As String = "tran_type"
        Public Const perdr_year As String = "perdr_year"
        Public Const perdr_num As String = "perdr_num"
        Public Const orign_code As String = "orign_code"
        Public Const tran_number As String = "tran_number"
        Public Const tran_date As String = "tran_date"
        Public Const date_created As String = "date_created"
        Public Const tran_descr As String = "tran_descr"
        Public Const tran_status As String = "tran_status"
        Public Const userid As String = "userid"
        Public Const tran_reverse As String = "tran_reverse"
        Public Const tran_refer As String = "tran_refer"
        Public Const suc_code As String = "suc_code"

        Public Shared Function ToPropertyName(ByVal columnName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(tranr_serial) = _cgtranrm.PropertyNames.tranr_serial
                ht(tran_type) = _cgtranrm.PropertyNames.tran_type
                ht(perdr_year) = _cgtranrm.PropertyNames.perdr_year
                ht(perdr_num) = _cgtranrm.PropertyNames.perdr_num
                ht(orign_code) = _cgtranrm.PropertyNames.orign_code
                ht(tran_number) = _cgtranrm.PropertyNames.tran_number
                ht(tran_date) = _cgtranrm.PropertyNames.tran_date
                ht(date_created) = _cgtranrm.PropertyNames.date_created
                ht(tran_descr) = _cgtranrm.PropertyNames.tran_descr
                ht(tran_status) = _cgtranrm.PropertyNames.tran_status
                ht(userid) = _cgtranrm.PropertyNames.userid
                ht(tran_reverse) = _cgtranrm.PropertyNames.tran_reverse
                ht(tran_refer) = _cgtranrm.PropertyNames.tran_refer
                ht(suc_code) = _cgtranrm.PropertyNames.suc_code

            End If

            Return CType(ht(columnName), String)

        End Function

        Private Shared ht As Hashtable = Nothing
    End Class
#End Region

#Region "PropertyNames"
    Public Class PropertyNames

        Public Const tranr_serial As String = "tranr_serial"
        Public Const tran_type As String = "tran_type"
        Public Const perdr_year As String = "perdr_year"
        Public Const perdr_num As String = "perdr_num"
        Public Const orign_code As String = "orign_code"
        Public Const tran_number As String = "tran_number"
        Public Const tran_date As String = "tran_date"
        Public Const date_created As String = "date_created"
        Public Const tran_descr As String = "tran_descr"
        Public Const tran_status As String = "tran_status"
        Public Const userid As String = "userid"
        Public Const tran_reverse As String = "tran_reverse"
        Public Const tran_refer As String = "tran_refer"
        Public Const suc_code As String = "suc_code"

        Public Shared Function ToColumnName(ByVal propertyName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(tranr_serial) = _cgtranrm.ColumnNames.tranr_serial
                ht(tran_type) = _cgtranrm.ColumnNames.tran_type
                ht(perdr_year) = _cgtranrm.ColumnNames.perdr_year
                ht(perdr_num) = _cgtranrm.ColumnNames.perdr_num
                ht(orign_code) = _cgtranrm.ColumnNames.orign_code
                ht(tran_number) = _cgtranrm.ColumnNames.tran_number
                ht(tran_date) = _cgtranrm.ColumnNames.tran_date
                ht(date_created) = _cgtranrm.ColumnNames.date_created
                ht(tran_descr) = _cgtranrm.ColumnNames.tran_descr
                ht(tran_status) = _cgtranrm.ColumnNames.tran_status
                ht(userid) = _cgtranrm.ColumnNames.userid
                ht(tran_reverse) = _cgtranrm.ColumnNames.tran_reverse
                ht(tran_refer) = _cgtranrm.ColumnNames.tran_refer
                ht(suc_code) = _cgtranrm.ColumnNames.suc_code

            End If

            Return CType(ht(propertyName), String)

        End Function

        Private Shared ht As Hashtable = Nothing

    End Class
#End Region

#Region "StringPropertyNames"
    Public Class StringPropertyNames

        Public Const tranr_serial As String = "s_tranr_serial"
        Public Const tran_type As String = "s_tran_type"
        Public Const perdr_year As String = "s_perdr_year"
        Public Const perdr_num As String = "s_perdr_num"
        Public Const orign_code As String = "s_orign_code"
        Public Const tran_number As String = "s_tran_number"
        Public Const tran_date As String = "s_tran_date"
        Public Const date_created As String = "s_date_created"
        Public Const tran_descr As String = "s_tran_descr"
        Public Const tran_status As String = "s_tran_status"
        Public Const userid As String = "s_userid"
        Public Const tran_reverse As String = "s_tran_reverse"
        Public Const tran_refer As String = "s_tran_refer"
        Public Const suc_code As String = "s_suc_code"

    End Class
#End Region

#Region "Properties"
    Public Overridable Property tranr_serial() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.tranr_serial)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.tranr_serial, Value)
        End Set
    End Property

    Public Overridable Property tran_type() As String
        Get
            Return MyBase.GetString(ColumnNames.tran_type)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.tran_type, Value)
        End Set
    End Property

    Public Overridable Property perdr_year() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.perdr_year)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.perdr_year, Value)
        End Set
    End Property

    Public Overridable Property perdr_num() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.perdr_num)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.perdr_num, Value)
        End Set
    End Property

    Public Overridable Property orign_code() As String
        Get
            Return MyBase.GetString(ColumnNames.orign_code)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.orign_code, Value)
        End Set
    End Property

    Public Overridable Property tran_number() As String
        Get
            Return MyBase.GetString(ColumnNames.tran_number)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.tran_number, Value)
        End Set
    End Property

    Public Overridable Property tran_date() As DateTime
        Get
            Return MyBase.GetDateTime(ColumnNames.tran_date)
        End Get
        Set(ByVal Value As DateTime)
            MyBase.SetDateTime(ColumnNames.tran_date, Value)
        End Set
    End Property

    Public Overridable Property date_created() As DateTime
        Get
            Return MyBase.GetDateTime(ColumnNames.date_created)
        End Get
        Set(ByVal Value As DateTime)
            MyBase.SetDateTime(ColumnNames.date_created, Value)
        End Set
    End Property

    Public Overridable Property tran_descr() As String
        Get
            Return MyBase.GetString(ColumnNames.tran_descr)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.tran_descr, Value)
        End Set
    End Property

    Public Overridable Property tran_status() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.tran_status)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.tran_status, Value)
        End Set
    End Property

    Public Overridable Property userid() As String
        Get
            Return MyBase.GetString(ColumnNames.userid)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.userid, Value)
        End Set
    End Property

    Public Overridable Property tran_reverse() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.tran_reverse)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.tran_reverse, Value)
        End Set
    End Property

    Public Overridable Property tran_refer() As String
        Get
            Return MyBase.GetString(ColumnNames.tran_refer)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.tran_refer, Value)
        End Set
    End Property

    Public Overridable Property suc_code() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.suc_code)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.suc_code, Value)
        End Set
    End Property

#End Region

#Region "String Properties"

    Public Overridable Property s_tranr_serial() As String
        Get
            If Me.IsColumnNull(ColumnNames.tranr_serial) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.tranr_serial)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.tranr_serial)
            Else
                Me.tranr_serial = MyBase.SetIntegerAsString(ColumnNames.tranr_serial, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_tran_type() As String
        Get
            If Me.IsColumnNull(ColumnNames.tran_type) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.tran_type)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.tran_type)
            Else
                Me.tran_type = MyBase.SetStringAsString(ColumnNames.tran_type, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_perdr_year() As String
        Get
            If Me.IsColumnNull(ColumnNames.perdr_year) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.perdr_year)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.perdr_year)
            Else
                Me.perdr_year = MyBase.SetIntegerAsString(ColumnNames.perdr_year, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_perdr_num() As String
        Get
            If Me.IsColumnNull(ColumnNames.perdr_num) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.perdr_num)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.perdr_num)
            Else
                Me.perdr_num = MyBase.SetIntegerAsString(ColumnNames.perdr_num, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_orign_code() As String
        Get
            If Me.IsColumnNull(ColumnNames.orign_code) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.orign_code)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.orign_code)
            Else
                Me.orign_code = MyBase.SetStringAsString(ColumnNames.orign_code, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_tran_number() As String
        Get
            If Me.IsColumnNull(ColumnNames.tran_number) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.tran_number)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.tran_number)
            Else
                Me.tran_number = MyBase.SetStringAsString(ColumnNames.tran_number, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_tran_date() As String
        Get
            If Me.IsColumnNull(ColumnNames.tran_date) Then
                Return String.Empty
            Else
                Return MyBase.GetDateTimeAsString(ColumnNames.tran_date)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.tran_date)
            Else
                Me.tran_date = MyBase.SetDateTimeAsString(ColumnNames.tran_date, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_date_created() As String
        Get
            If Me.IsColumnNull(ColumnNames.date_created) Then
                Return String.Empty
            Else
                Return MyBase.GetDateTimeAsString(ColumnNames.date_created)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.date_created)
            Else
                Me.date_created = MyBase.SetDateTimeAsString(ColumnNames.date_created, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_tran_descr() As String
        Get
            If Me.IsColumnNull(ColumnNames.tran_descr) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.tran_descr)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.tran_descr)
            Else
                Me.tran_descr = MyBase.SetStringAsString(ColumnNames.tran_descr, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_tran_status() As String
        Get
            If Me.IsColumnNull(ColumnNames.tran_status) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.tran_status)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.tran_status)
            Else
                Me.tran_status = MyBase.SetIntegerAsString(ColumnNames.tran_status, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_userid() As String
        Get
            If Me.IsColumnNull(ColumnNames.userid) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.userid)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.userid)
            Else
                Me.userid = MyBase.SetStringAsString(ColumnNames.userid, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_tran_reverse() As String
        Get
            If Me.IsColumnNull(ColumnNames.tran_reverse) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.tran_reverse)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.tran_reverse)
            Else
                Me.tran_reverse = MyBase.SetIntegerAsString(ColumnNames.tran_reverse, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_tran_refer() As String
        Get
            If Me.IsColumnNull(ColumnNames.tran_refer) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.tran_refer)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.tran_refer)
            Else
                Me.tran_refer = MyBase.SetStringAsString(ColumnNames.tran_refer, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_suc_code() As String
        Get
            If Me.IsColumnNull(ColumnNames.suc_code) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.suc_code)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.suc_code)
            Else
                Me.suc_code = MyBase.SetIntegerAsString(ColumnNames.suc_code, Value)
            End If
        End Set
    End Property


#End Region

#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffWhereParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffWhereParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "TearOff's"
        Public Class TearOffWhereParameter

            Public Sub New(ByVal clause As WhereClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property tranr_serial() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.tranr_serial, Parameters.tranr_serial)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property tran_type() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.tran_type, Parameters.tran_type)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property perdr_year() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.perdr_year, Parameters.perdr_year)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property perdr_num() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.perdr_num, Parameters.perdr_num)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property orign_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.orign_code, Parameters.orign_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property tran_number() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.tran_number, Parameters.tran_number)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property tran_date() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.tran_date, Parameters.tran_date)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property date_created() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.date_created, Parameters.date_created)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property tran_descr() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.tran_descr, Parameters.tran_descr)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property tran_status() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.tran_status, Parameters.tran_status)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property userid() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.userid, Parameters.userid)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property tran_reverse() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.tran_reverse, Parameters.tran_reverse)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property tran_refer() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.tran_refer, Parameters.tran_refer)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property suc_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.suc_code, Parameters.suc_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Private _clause As WhereClause
        End Class
#End Region

        Public ReadOnly Property tranr_serial() As WhereParameter
            Get
                If _tranr_serial_W Is Nothing Then
                    _tranr_serial_W = TearOff.tranr_serial
                End If
                Return _tranr_serial_W
            End Get
        End Property

        Public ReadOnly Property tran_type() As WhereParameter
            Get
                If _tran_type_W Is Nothing Then
                    _tran_type_W = TearOff.tran_type
                End If
                Return _tran_type_W
            End Get
        End Property

        Public ReadOnly Property perdr_year() As WhereParameter
            Get
                If _perdr_year_W Is Nothing Then
                    _perdr_year_W = TearOff.perdr_year
                End If
                Return _perdr_year_W
            End Get
        End Property

        Public ReadOnly Property perdr_num() As WhereParameter
            Get
                If _perdr_num_W Is Nothing Then
                    _perdr_num_W = TearOff.perdr_num
                End If
                Return _perdr_num_W
            End Get
        End Property

        Public ReadOnly Property orign_code() As WhereParameter
            Get
                If _orign_code_W Is Nothing Then
                    _orign_code_W = TearOff.orign_code
                End If
                Return _orign_code_W
            End Get
        End Property

        Public ReadOnly Property tran_number() As WhereParameter
            Get
                If _tran_number_W Is Nothing Then
                    _tran_number_W = TearOff.tran_number
                End If
                Return _tran_number_W
            End Get
        End Property

        Public ReadOnly Property tran_date() As WhereParameter
            Get
                If _tran_date_W Is Nothing Then
                    _tran_date_W = TearOff.tran_date
                End If
                Return _tran_date_W
            End Get
        End Property

        Public ReadOnly Property date_created() As WhereParameter
            Get
                If _date_created_W Is Nothing Then
                    _date_created_W = TearOff.date_created
                End If
                Return _date_created_W
            End Get
        End Property

        Public ReadOnly Property tran_descr() As WhereParameter
            Get
                If _tran_descr_W Is Nothing Then
                    _tran_descr_W = TearOff.tran_descr
                End If
                Return _tran_descr_W
            End Get
        End Property

        Public ReadOnly Property tran_status() As WhereParameter
            Get
                If _tran_status_W Is Nothing Then
                    _tran_status_W = TearOff.tran_status
                End If
                Return _tran_status_W
            End Get
        End Property

        Public ReadOnly Property userid() As WhereParameter
            Get
                If _Userid_W Is Nothing Then
                    _Userid_W = TearOff.Userid
                End If
                Return _Userid_W
            End Get
        End Property

        Public ReadOnly Property tran_reverse() As WhereParameter
            Get
                If _tran_reverse_W Is Nothing Then
                    _tran_reverse_W = TearOff.tran_reverse
                End If
                Return _tran_reverse_W
            End Get
        End Property

        Public ReadOnly Property tran_refer() As WhereParameter
            Get
                If _tran_refer_W Is Nothing Then
                    _tran_refer_W = TearOff.tran_refer
                End If
                Return _tran_refer_W
            End Get
        End Property

        Public ReadOnly Property suc_code() As WhereParameter
            Get
                If _suc_code_W Is Nothing Then
                    _suc_code_W = TearOff.suc_code
                End If
                Return _suc_code_W
            End Get
        End Property

        Private _tranr_serial_W As WhereParameter = Nothing
        Private _tran_type_W As WhereParameter = Nothing
        Private _perdr_year_W As WhereParameter = Nothing
        Private _perdr_num_W As WhereParameter = Nothing
        Private _orign_code_W As WhereParameter = Nothing
        Private _tran_number_W As WhereParameter = Nothing
        Private _tran_date_W As WhereParameter = Nothing
        Private _date_created_W As WhereParameter = Nothing
        Private _tran_descr_W As WhereParameter = Nothing
        Private _tran_status_W As WhereParameter = Nothing
        Private _userid_W As WhereParameter = Nothing
        Private _tran_reverse_W As WhereParameter = Nothing
        Private _tran_refer_W As WhereParameter = Nothing
        Private _suc_code_W As WhereParameter = Nothing

        Public Sub WhereClauseReset()
            _tranr_serial_W = Nothing
            _tran_type_W = Nothing
            _perdr_year_W = Nothing
            _perdr_num_W = Nothing
            _orign_code_W = Nothing
            _tran_number_W = Nothing
            _tran_date_W = Nothing
            _date_created_W = Nothing
            _tran_descr_W = Nothing
            _tran_status_W = Nothing
            _Userid_W = Nothing
            _tran_reverse_W = Nothing
            _tran_refer_W = Nothing
            _suc_code_W = Nothing
            Me._entity.Query.FlushWhereParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffWhereParameter
    End Class

    Public ReadOnly Property Where() As WhereClause
        Get
            If _whereClause Is Nothing Then
                _whereClause = New WhereClause(Me)
            End If

            Return _whereClause
        End Get
    End Property

    Private _whereClause As WhereClause = Nothing
#End Region

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffAggregateParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffAggregateParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "AggregateParameter TearOff's"
        Public Class TearOffAggregateParameter

            Public Sub New(ByVal clause As AggregateClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property tranr_serial() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.tranr_serial, Parameters.tranr_serial)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property tran_type() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.tran_type, Parameters.tran_type)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property perdr_year() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.perdr_year, Parameters.perdr_year)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property perdr_num() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.perdr_num, Parameters.perdr_num)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property orign_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.orign_code, Parameters.orign_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property tran_number() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.tran_number, Parameters.tran_number)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property tran_date() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.tran_date, Parameters.tran_date)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property date_created() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.date_created, Parameters.date_created)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property tran_descr() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.tran_descr, Parameters.tran_descr)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property tran_status() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.tran_status, Parameters.tran_status)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property userid() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.userid, Parameters.userid)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property tran_reverse() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.tran_reverse, Parameters.tran_reverse)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property tran_refer() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.tran_refer, Parameters.tran_refer)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property suc_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.suc_code, Parameters.suc_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Private _clause As AggregateClause
        End Class
#End Region

        Public ReadOnly Property tranr_serial() As AggregateParameter
            Get
                If _tranr_serial_W Is Nothing Then
                    _tranr_serial_W = TearOff.tranr_serial
                End If
                Return _tranr_serial_W
            End Get
        End Property

        Public ReadOnly Property tran_type() As AggregateParameter
            Get
                If _tran_type_W Is Nothing Then
                    _tran_type_W = TearOff.tran_type
                End If
                Return _tran_type_W
            End Get
        End Property

        Public ReadOnly Property perdr_year() As AggregateParameter
            Get
                If _perdr_year_W Is Nothing Then
                    _perdr_year_W = TearOff.perdr_year
                End If
                Return _perdr_year_W
            End Get
        End Property

        Public ReadOnly Property perdr_num() As AggregateParameter
            Get
                If _perdr_num_W Is Nothing Then
                    _perdr_num_W = TearOff.perdr_num
                End If
                Return _perdr_num_W
            End Get
        End Property

        Public ReadOnly Property orign_code() As AggregateParameter
            Get
                If _orign_code_W Is Nothing Then
                    _orign_code_W = TearOff.orign_code
                End If
                Return _orign_code_W
            End Get
        End Property

        Public ReadOnly Property tran_number() As AggregateParameter
            Get
                If _tran_number_W Is Nothing Then
                    _tran_number_W = TearOff.tran_number
                End If
                Return _tran_number_W
            End Get
        End Property

        Public ReadOnly Property tran_date() As AggregateParameter
            Get
                If _tran_date_W Is Nothing Then
                    _tran_date_W = TearOff.tran_date
                End If
                Return _tran_date_W
            End Get
        End Property

        Public ReadOnly Property date_created() As AggregateParameter
            Get
                If _date_created_W Is Nothing Then
                    _date_created_W = TearOff.date_created
                End If
                Return _date_created_W
            End Get
        End Property

        Public ReadOnly Property tran_descr() As AggregateParameter
            Get
                If _tran_descr_W Is Nothing Then
                    _tran_descr_W = TearOff.tran_descr
                End If
                Return _tran_descr_W
            End Get
        End Property

        Public ReadOnly Property tran_status() As AggregateParameter
            Get
                If _tran_status_W Is Nothing Then
                    _tran_status_W = TearOff.tran_status
                End If
                Return _tran_status_W
            End Get
        End Property

        Public ReadOnly Property userid() As AggregateParameter
            Get
                If _Userid_W Is Nothing Then
                    _Userid_W = TearOff.Userid
                End If
                Return _Userid_W
            End Get
        End Property

        Public ReadOnly Property tran_reverse() As AggregateParameter
            Get
                If _tran_reverse_W Is Nothing Then
                    _tran_reverse_W = TearOff.tran_reverse
                End If
                Return _tran_reverse_W
            End Get
        End Property

        Public ReadOnly Property tran_refer() As AggregateParameter
            Get
                If _tran_refer_W Is Nothing Then
                    _tran_refer_W = TearOff.tran_refer
                End If
                Return _tran_refer_W
            End Get
        End Property

        Public ReadOnly Property suc_code() As AggregateParameter
            Get
                If _suc_code_W Is Nothing Then
                    _suc_code_W = TearOff.suc_code
                End If
                Return _suc_code_W
            End Get
        End Property

        Private _tranr_serial_W As AggregateParameter = Nothing
        Private _tran_type_W As AggregateParameter = Nothing
        Private _perdr_year_W As AggregateParameter = Nothing
        Private _perdr_num_W As AggregateParameter = Nothing
        Private _orign_code_W As AggregateParameter = Nothing
        Private _tran_number_W As AggregateParameter = Nothing
        Private _tran_date_W As AggregateParameter = Nothing
        Private _date_created_W As AggregateParameter = Nothing
        Private _tran_descr_W As AggregateParameter = Nothing
        Private _tran_status_W As AggregateParameter = Nothing
        Private _userid_W As AggregateParameter = Nothing
        Private _tran_reverse_W As AggregateParameter = Nothing
        Private _tran_refer_W As AggregateParameter = Nothing
        Private _suc_code_W As AggregateParameter = Nothing

        Public Sub AggregateClauseReset()
            _tranr_serial_W = Nothing
            _tran_type_W = Nothing
            _perdr_year_W = Nothing
            _perdr_num_W = Nothing
            _orign_code_W = Nothing
            _tran_number_W = Nothing
            _tran_date_W = Nothing
            _date_created_W = Nothing
            _tran_descr_W = Nothing
            _tran_status_W = Nothing
            _Userid_W = Nothing
            _tran_reverse_W = Nothing
            _tran_refer_W = Nothing
            _suc_code_W = Nothing
            Me._entity.Query.FlushAggregateParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffAggregateParameter
    End Class

    Public ReadOnly Property Aggregate() As AggregateClause
        Get
            If _aggregateClause Is Nothing Then
                _aggregateClause = New AggregateClause(Me)
            End If

            Return _aggregateClause
        End Get
    End Property

    Private _aggregateClause As AggregateClause = Nothing
#End Region

    Protected Overrides Function GetInsertCommand() As IDbCommand

        Dim cmd As OleDbCommand = New OleDbCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_cgtranrmInsert]"

        CreateParameters(cmd)

        Return cmd

    End Function

    Protected Overrides Function GetUpdateCommand() As IDbCommand

        Dim cmd As OleDbCommand = New OleDbCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_cgtranrmUpdate]"

        CreateParameters(cmd)

        Return cmd

    End Function

    Protected Overrides Function GetDeleteCommand() As IDbCommand

        Dim cmd As OleDbCommand = New OleDbCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_cgtranrmDelete]"

        Dim p As OleDbParameter
        p = cmd.Parameters.Add(Parameters.tranr_serial)
        p.SourceColumn = ColumnNames.tranr_serial
        p.SourceVersion = DataRowVersion.Current


        Return cmd

    End Function

    Private Sub CreateParameters(ByVal cmd As OleDbCommand)

        Dim p As OleDbParameter
        p = cmd.Parameters.Add(Parameters.tranr_serial)
        p.SourceColumn = ColumnNames.tranr_serial
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.tran_type)
        p.SourceColumn = ColumnNames.tran_type
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.perdr_year)
        p.SourceColumn = ColumnNames.perdr_year
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.perdr_num)
        p.SourceColumn = ColumnNames.perdr_num
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.orign_code)
        p.SourceColumn = ColumnNames.orign_code
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.tran_number)
        p.SourceColumn = ColumnNames.tran_number
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.tran_date)
        p.SourceColumn = ColumnNames.tran_date
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.date_created)
        p.SourceColumn = ColumnNames.date_created
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.tran_descr)
        p.SourceColumn = ColumnNames.tran_descr
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.tran_status)
        p.SourceColumn = ColumnNames.tran_status
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.userid)
        p.SourceColumn = ColumnNames.userid
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.tran_reverse)
        p.SourceColumn = ColumnNames.tran_reverse
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.tran_refer)
        p.SourceColumn = ColumnNames.tran_refer
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.suc_code)
        p.SourceColumn = ColumnNames.suc_code
        p.SourceVersion = DataRowVersion.Current

    End Sub

End Class


    
