'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class OleDbEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.7)

Imports System
Imports System.Data
Imports System.Data.OleDb
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _ccinvcem
    Inherits OleDbEntity

    Public Sub New()
        Me.QuerySource = "ccinvcem"
        Me.MappingName = "ccinvcem"
    End Sub

    '=================================================================
    '  Public Overrides Sub AddNew()
    '=================================================================
    '
    '=================================================================
    Public Overrides Sub AddNew()
        MyBase.AddNew()

    End Sub

    Public Overrides Sub FlushData()
        Me._whereClause = Nothing
        Me._aggregateClause = Nothing
        MyBase.FlushData()
    End Sub


    Public Overrides Function GetAutoKeyColumn() As String
        Return "invce_serial"
    End Function

    '=================================================================
    '  	Public Function LoadAll() As Boolean
    '=================================================================
    '  Loads all of the records in the database, and sets the currentRow to the first row
    '=================================================================
    Public Function LoadAll() As Boolean

        Dim parameters As ListDictionary = Nothing
        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_ccinvcemLoadAll]", parameters)

    End Function

    '=================================================================
    ' Public Overridable Function LoadByPrimaryKey()  As Boolean
    '=================================================================
    '  Loads a single row of via the primary key
    '=================================================================
    Public Overridable Function LoadByPrimaryKey(ByVal invce_serial As Integer, ByVal suc_code As Integer) As Boolean
        Dim parameters As ListDictionary = New ListDictionary
        parameters.Add(_ccinvcem.Parameters.invce_serial, invce_serial)
        parameters.Add(_ccinvcem.Parameters.suc_code, suc_code)

        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_ccinvcemLoadByPrimaryKey]", parameters)
    End Function

#Region "Parameters"
    Protected Class Parameters
        Public Shared ReadOnly Property invce_serial() As OleDbParameter
            Get
                Return New OleDbParameter("@invce_serial", OleDbType.Integer)
            End Get
        End Property
        Public Shared ReadOnly Property type_code() As OleDbParameter
            Get
                Return New OleDbParameter("@type_code", OleDbType.Char)
            End Get
        End Property
        Public Shared ReadOnly Property invce_no() As OleDbParameter
            Get
                Return New OleDbParameter("@invce_no", OleDbType.Integer)
            End Get
        End Property
        Public Shared ReadOnly Property term_code() As OleDbParameter
            Get
                Return New OleDbParameter("@term_code", OleDbType.Char)
            End Get
        End Property
        Public Shared ReadOnly Property cust_code() As OleDbParameter
            Get
                Return New OleDbParameter("@cust_code", OleDbType.Integer)
            End Get
        End Property
        Public Shared ReadOnly Property invce_date() As OleDbParameter
            Get
                Return New OleDbParameter("@invce_date", OleDbType.DBDate)
            End Get
        End Property
        Public Shared ReadOnly Property detail() As OleDbParameter
            Get
                Return New OleDbParameter("@detail", OleDbType.Char)
            End Get
        End Property
        Public Shared ReadOnly Property due_date() As OleDbParameter
            Get
                Return New OleDbParameter("@due_date", OleDbType.DBDate)
            End Get
        End Property
        Public Shared ReadOnly Property amount() As OleDbParameter
            Get
                Return New OleDbParameter("@amount", OleDbType.Decimal)
            End Get
        End Property
        Public Shared ReadOnly Property itbis() As OleDbParameter
            Get
                Return New OleDbParameter("@itbis", OleDbType.Decimal)
            End Get
        End Property
        Public Shared ReadOnly Property amount_grab() As OleDbParameter
            Get
                Return New OleDbParameter("@amount_grab", OleDbType.Decimal)
            End Get
        End Property
        Public Shared ReadOnly Property amount_excent() As OleDbParameter
            Get
                Return New OleDbParameter("@amount_excent", OleDbType.Decimal)
            End Get
        End Property
        Public Shared ReadOnly Property cargo_banc() As OleDbParameter
            Get
                Return New OleDbParameter("@cargo_banc", OleDbType.Decimal)
            End Get
        End Property
        Public Shared ReadOnly Property cargo_desc() As OleDbParameter
            Get
                Return New OleDbParameter("@cargo_desc", OleDbType.Decimal)
            End Get
        End Property
        Public Shared ReadOnly Property excento() As OleDbParameter
            Get
                Return New OleDbParameter("@excento", OleDbType.Decimal)
            End Get
        End Property
        Public Shared ReadOnly Property impto() As OleDbParameter
            Get
                Return New OleDbParameter("@impto", OleDbType.Decimal)
            End Get
        End Property
        Public Shared ReadOnly Property invce_status() As OleDbParameter
            Get
                Return New OleDbParameter("@invce_status", OleDbType.Integer)
            End Get
        End Property
        Public Shared ReadOnly Property total_amount() As OleDbParameter
            Get
                Return New OleDbParameter("@total_amount", OleDbType.Decimal)
            End Get
        End Property
        Public Shared ReadOnly Property invce_ncf() As OleDbParameter
            Get
                Return New OleDbParameter("@invce_ncf", OleDbType.Char)
            End Get
        End Property
        Public Shared ReadOnly Property vend_code() As OleDbParameter
            Get
                Return New OleDbParameter("@vend_code", OleDbType.Integer)
            End Get
        End Property
        Public Shared ReadOnly Property chequera() As OleDbParameter
            Get
                Return New OleDbParameter("@chequera", OleDbType.Integer)
            End Get
        End Property
        Public Shared ReadOnly Property suc_code() As OleDbParameter
            Get
                Return New OleDbParameter("@suc_code", OleDbType.Integer)
            End Get
        End Property
        Public Shared ReadOnly Property invce_datetran() As OleDbParameter
            Get
                Return New OleDbParameter("@invce_datetran", OleDbType.DBDate)
            End Get
        End Property
        Public Shared ReadOnly Property invce_create() As OleDbParameter
            Get
                Return New OleDbParameter("@invce_create", OleDbType.DBDate)
            End Get
        End Property
    End Class
#End Region

#Region "ColumnNames"
    Public Class ColumnNames
        Public Const invce_serial As String = "invce_serial"
        Public Const type_code As String = "type_code"
        Public Const invce_no As String = "invce_no"
        Public Const term_code As String = "term_code"
        Public Const cust_code As String = "cust_code"
        Public Const invce_date As String = "invce_date"
        Public Const detail As String = "detail"
        Public Const due_date As String = "due_date"
        Public Const amount As String = "amount"
        Public Const itbis As String = "itbis"
        Public Const amount_grab As String = "amount_grab"
        Public Const amount_excent As String = "amount_excent"
        Public Const cargo_banc As String = "cargo_banc"
        Public Const cargo_desc As String = "cargo_desc"
        Public Const excento As String = "excento"
        Public Const impto As String = "impto"
        Public Const invce_status As String = "invce_status"
        Public Const total_amount As String = "total_amount"
        Public Const invce_ncf As String = "invce_ncf"
        Public Const vend_code As String = "vend_code"
        Public Const chequera As String = "chequera"
        Public Const suc_code As String = "suc_code"
        Public Const invce_datetran As String = "invce_datetran"
        Public Const invce_create As String = "invce_create"
        Public Shared Function ToPropertyName(ByVal columnName As String) As String
            If ht Is Nothing Then

                ht = New Hashtable

                ht(invce_serial) = _ccinvcem.PropertyNames.invce_serial
                ht(type_code) = _ccinvcem.PropertyNames.type_code
                ht(invce_no) = _ccinvcem.PropertyNames.invce_no
                ht(term_code) = _ccinvcem.PropertyNames.term_code
                ht(cust_code) = _ccinvcem.PropertyNames.cust_code
                ht(invce_date) = _ccinvcem.PropertyNames.invce_date
                ht(detail) = _ccinvcem.PropertyNames.detail
                ht(due_date) = _ccinvcem.PropertyNames.due_date
                ht(amount) = _ccinvcem.PropertyNames.amount
                ht(itbis) = _ccinvcem.PropertyNames.itbis
                ht(amount_grab) = _ccinvcem.PropertyNames.amount_grab
                ht(amount_excent) = _ccinvcem.PropertyNames.amount_excent
                ht(cargo_banc) = _ccinvcem.PropertyNames.cargo_banc
                ht(cargo_desc) = _ccinvcem.PropertyNames.cargo_desc
                ht(excento) = _ccinvcem.PropertyNames.excento
                ht(impto) = _ccinvcem.PropertyNames.impto
                ht(invce_status) = _ccinvcem.PropertyNames.invce_status
                ht(total_amount) = _ccinvcem.PropertyNames.total_amount
                ht(invce_ncf) = _ccinvcem.PropertyNames.invce_ncf
                ht(vend_code) = _ccinvcem.PropertyNames.vend_code
                ht(chequera) = _ccinvcem.PropertyNames.chequera
                ht(suc_code) = _ccinvcem.PropertyNames.suc_code
                ht(invce_datetran) = _ccinvcem.PropertyNames.invce_datetran
                ht(invce_create) = _ccinvcem.PropertyNames.invce_create
            End If

            Return CType(ht(columnName), String)

        End Function

        Private Shared ht As Hashtable = Nothing
    End Class
#End Region

#Region "PropertyNames"
    Public Class PropertyNames

        Public Const invce_serial As String = "invce_serial"
        Public Const type_code As String = "type_code"
        Public Const invce_no As String = "invce_no"
        Public Const term_code As String = "term_code"
        Public Const cust_code As String = "cust_code"
        Public Const invce_date As String = "invce_date"
        Public Const detail As String = "detail"
        Public Const due_date As String = "due_date"
        Public Const amount As String = "amount"
        Public Const itbis As String = "itbis"
        Public Const amount_grab As String = "amount_grab"
        Public Const amount_excent As String = "amount_excent"
        Public Const cargo_banc As String = "cargo_banc"
        Public Const cargo_desc As String = "cargo_desc"
        Public Const excento As String = "excento"
        Public Const impto As String = "impto"
        Public Const invce_status As String = "invce_status"
        Public Const total_amount As String = "total_amount"
        Public Const invce_ncf As String = "invce_ncf"
        Public Const vend_code As String = "vend_code"
        Public Const chequera As String = "chequera"
        Public Const suc_code As String = "suc_code"
        Public Const invce_datetran As String = "invce_datetran"
        Public Const invce_create As String = "invce_create"

        Public Shared Function ToColumnName(ByVal propertyName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(invce_serial) = _ccinvcem.ColumnNames.invce_serial
                ht(type_code) = _ccinvcem.ColumnNames.type_code
                ht(invce_no) = _ccinvcem.ColumnNames.invce_no
                ht(term_code) = _ccinvcem.ColumnNames.term_code
                ht(cust_code) = _ccinvcem.ColumnNames.cust_code
                ht(invce_date) = _ccinvcem.ColumnNames.invce_date
                ht(detail) = _ccinvcem.ColumnNames.detail
                ht(due_date) = _ccinvcem.ColumnNames.due_date
                ht(amount) = _ccinvcem.ColumnNames.amount
                ht(itbis) = _ccinvcem.ColumnNames.itbis
                ht(amount_grab) = _ccinvcem.ColumnNames.amount_grab
                ht(amount_excent) = _ccinvcem.ColumnNames.amount_excent
                ht(cargo_banc) = _ccinvcem.ColumnNames.cargo_banc
                ht(cargo_desc) = _ccinvcem.ColumnNames.cargo_desc
                ht(excento) = _ccinvcem.ColumnNames.excento
                ht(impto) = _ccinvcem.ColumnNames.impto
                ht(invce_status) = _ccinvcem.ColumnNames.invce_status
                ht(total_amount) = _ccinvcem.ColumnNames.total_amount
                ht(invce_ncf) = _ccinvcem.ColumnNames.invce_ncf
                ht(suc_code) = _ccinvcem.ColumnNames.suc_code
                ht(vend_code) = _ccinvcem.ColumnNames.vend_code
                ht(chequera) = _ccinvcem.ColumnNames.chequera
                ht(invce_datetran) = _ccinvcem.ColumnNames.invce_datetran
                ht(invce_create) = _ccinvcem.ColumnNames.invce_create

            End If

            Return CType(ht(propertyName), String)

        End Function

        Private Shared ht As Hashtable = Nothing

    End Class
#End Region

#Region "StringPropertyNames"
    Public Class StringPropertyNames

        Public Const invce_serial As String = "s_invce_serial"
        Public Const type_code As String = "s_type_code"
        Public Const invce_no As String = "s_invce_no"
        Public Const term_code As String = "s_term_code"
        Public Const cust_code As String = "s_cust_code"
        Public Const invce_date As String = "s_invce_date"
        Public Const detail As String = "s_detail"
        Public Const due_date As String = "s_due_date"
        Public Const amount As String = "s_amount"
        Public Const itbis As String = "s_itbis"
        Public Const amount_grab As String = "s_amount_grab"
        Public Const amount_excent As String = "s_amount_excent"
        Public Const cargo_banc As String = "s_cargo_banc"
        Public Const cargo_desc As String = "s_cargo_desc"
        Public Const excento As String = "s_excento"
        Public Const impto As String = "s_impto"
        Public Const invce_status As String = "s_invce_status"
        Public Const total_amount As String = "s_total_amount"
        Public Const invce_ncf As String = "s_invce_ncf"
        Public Const vend_code As String = "s_vend_code"
        Public Const suc_code As String = "suc_code"
        Public Const chequera As String = "s_chequera"
        Public Const invce_datetran As String = "s_invce_datetran"
        Public Const invce_create As String = "s_invce_create"
    End Class
#End Region

#Region "Properties"
    Public Overridable Property invce_serial() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.invce_serial)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.invce_serial, Value)
        End Set
    End Property
    Public Overridable Property type_code() As String
        Get
            Return MyBase.GetString(ColumnNames.type_code)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.type_code, Value)
        End Set
    End Property
    Public Overridable Property invce_no() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.invce_no)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.invce_no, Value)
        End Set
    End Property

    Public Overridable Property term_code() As String
        Get
            Return MyBase.GetString(ColumnNames.term_code)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.term_code, Value)
        End Set
    End Property

    Public Overridable Property cust_code() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.cust_code)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.cust_code, Value)
        End Set
    End Property
    Public Overridable Property invce_date() As DateTime
        Get
            Return MyBase.GetDateTime(ColumnNames.invce_date)
        End Get
        Set(ByVal Value As DateTime)
            MyBase.SetDateTime(ColumnNames.invce_date, Value)
        End Set
    End Property
    Public Overridable Property detail() As String
        Get
            Return MyBase.GetString(ColumnNames.detail)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.detail, Value)
        End Set
    End Property
    Public Overridable Property due_date() As DateTime
        Get
            Return MyBase.GetDateTime(ColumnNames.due_date)
        End Get
        Set(ByVal Value As DateTime)
            MyBase.SetDateTime(ColumnNames.due_date, Value)
        End Set
    End Property
    Public Overridable Property amount() As Decimal
        Get
            Return MyBase.GetDecimal(ColumnNames.amount)
        End Get
        Set(ByVal Value As Decimal)
            MyBase.SetDecimal(ColumnNames.amount, Value)
        End Set
    End Property
    Public Overridable Property itbis() As Decimal
        Get
            Return MyBase.GetDecimal(ColumnNames.itbis)
        End Get
        Set(ByVal Value As Decimal)
            MyBase.SetDecimal(ColumnNames.itbis, Value)
        End Set
    End Property
    Public Overridable Property amount_grab() As Decimal
        Get
            Return MyBase.GetDecimal(ColumnNames.amount_grab)
        End Get
        Set(ByVal Value As Decimal)
            MyBase.SetDecimal(ColumnNames.amount_grab, Value)
        End Set
    End Property
    Public Overridable Property amount_excent() As Decimal
        Get
            Return MyBase.GetDecimal(ColumnNames.amount_excent)
        End Get
        Set(ByVal Value As Decimal)
            MyBase.SetDecimal(ColumnNames.amount_excent, Value)
        End Set
    End Property
    Public Overridable Property cargo_banc() As Decimal
        Get
            Return MyBase.GetDecimal(ColumnNames.cargo_banc)
        End Get
        Set(ByVal Value As Decimal)
            MyBase.SetDecimal(ColumnNames.cargo_banc, Value)
        End Set
    End Property
    Public Overridable Property cargo_desc() As Decimal
        Get
            Return MyBase.GetDecimal(ColumnNames.cargo_desc)
        End Get
        Set(ByVal Value As Decimal)
            MyBase.SetDecimal(ColumnNames.cargo_desc, Value)
        End Set
    End Property
    Public Overridable Property excento() As Decimal
        Get
            Return MyBase.GetDecimal(ColumnNames.excento)
        End Get
        Set(ByVal Value As Decimal)
            MyBase.SetDecimal(ColumnNames.excento, Value)
        End Set
    End Property
    Public Overridable Property impto() As Decimal
        Get
            Return MyBase.GetDecimal(ColumnNames.impto)
        End Get
        Set(ByVal Value As Decimal)
            MyBase.SetDecimal(ColumnNames.impto, Value)
        End Set
    End Property
    Public Overridable Property invce_status() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.invce_status)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.invce_status, Value)
        End Set
    End Property
    Public Overridable Property total_amount() As Decimal
        Get
            Return MyBase.GetDecimal(ColumnNames.total_amount)
        End Get
        Set(ByVal Value As Decimal)
            MyBase.SetDecimal(ColumnNames.total_amount, Value)
        End Set
    End Property
    Public Overridable Property invce_ncf() As String
        Get
            Return MyBase.GetString(ColumnNames.invce_ncf)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.invce_ncf, Value)
        End Set
    End Property

    Public Overridable Property vend_code() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.vend_code)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.vend_code, Value)
        End Set
    End Property
    Public Overridable Property chequera() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.chequera)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.chequera, Value)
        End Set
    End Property
    Public Overridable Property suc_code() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.suc_code)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.suc_code, Value)
        End Set
    End Property
    Public Overridable Property invce_datetran() As DateTime
        Get
            Return MyBase.GetDateTime(ColumnNames.invce_datetran)
        End Get
        Set(ByVal Value As DateTime)
            MyBase.SetDateTime(ColumnNames.invce_datetran, Value)
        End Set
    End Property
    Public Overridable Property invce_create() As DateTime
        Get
            Return MyBase.GetDateTime(ColumnNames.invce_create)
        End Get
        Set(ByVal Value As DateTime)
            MyBase.SetDateTime(ColumnNames.invce_create, Value)
        End Set
    End Property
#End Region

#Region "String Properties"

    Public Overridable Property s_invce_serial() As Integer
        Get
            If Me.IsColumnNull(ColumnNames.invce_serial) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.invce_serial)
            End If
        End Get
        Set(ByVal Value As Integer)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.invce_serial)
            Else
                Me.invce_serial = MyBase.SetIntegerAsString(ColumnNames.invce_serial, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_type_code() As String
        Get
            If Me.IsColumnNull(ColumnNames.type_code) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.type_code)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.type_code)
            Else
                Me.type_code = MyBase.SetStringAsString(ColumnNames.type_code, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_invce_no() As Integer
        Get
            If Me.IsColumnNull(ColumnNames.invce_no) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.invce_no)
            End If
        End Get
        Set(ByVal Value As Integer)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.invce_no)
            Else
                Me.invce_no = MyBase.SetIntegerAsString(ColumnNames.invce_no, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_term_code() As String
        Get
            If Me.IsColumnNull(ColumnNames.term_code) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.term_code)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.term_code)
            Else
                Me.term_code = MyBase.SetStringAsString(ColumnNames.term_code, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_cust_code() As Integer
        Get
            If Me.IsColumnNull(ColumnNames.cust_code) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.cust_code)
            End If
        End Get
        Set(ByVal Value As Integer)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.cust_code)
            Else
                Me.cust_code = MyBase.SetIntegerAsString(ColumnNames.cust_code, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_invce_date() As DateTime
        Get
            If Me.IsColumnNull(ColumnNames.invce_date) Then
                Return String.Empty
            Else
                Return MyBase.GetDateTimeAsString(ColumnNames.invce_date)
            End If
        End Get
        Set(ByVal Value As DateTime)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.invce_date)
            Else
                Me.invce_date = MyBase.SetDateTimeAsString(ColumnNames.invce_date, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_detail() As String
        Get
            If Me.IsColumnNull(ColumnNames.detail) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.detail)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.detail)
            Else
                Me.detail = MyBase.SetStringAsString(ColumnNames.detail, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_due_date() As DateTime
        Get
            If Me.IsColumnNull(ColumnNames.due_date) Then
                Return String.Empty
            Else
                Return MyBase.GetDateTimeAsString(ColumnNames.due_date)
            End If
        End Get
        Set(ByVal Value As DateTime)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.due_date)
            Else
                Me.due_date = MyBase.SetDateTimeAsString(ColumnNames.due_date, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_amount() As Decimal
        Get
            If Me.IsColumnNull(ColumnNames.amount) Then
                Return String.Empty
            Else
                Return MyBase.GetDecimalAsString(ColumnNames.amount)
            End If
        End Get
        Set(ByVal Value As Decimal)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.amount)
            Else
                Me.amount = MyBase.SetDecimalAsString(ColumnNames.amount, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_itbis() As Decimal
        Get
            If Me.IsColumnNull(ColumnNames.itbis) Then
                Return String.Empty
            Else
                Return MyBase.GetDecimalAsString(ColumnNames.itbis)
            End If
        End Get
        Set(ByVal Value As Decimal)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.itbis)
            Else
                Me.itbis = MyBase.SetDecimalAsString(ColumnNames.itbis, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_amount_grab() As Decimal
        Get
            If Me.IsColumnNull(ColumnNames.amount_grab) Then
                Return String.Empty
            Else
                Return MyBase.GetDecimalAsString(ColumnNames.amount_grab)
            End If
        End Get
        Set(ByVal Value As Decimal)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.amount_grab)
            Else
                Me.amount_grab = MyBase.SetDecimalAsString(ColumnNames.amount_grab, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_amount_excent() As Decimal
        Get
            If Me.IsColumnNull(ColumnNames.amount_excent) Then
                Return String.Empty
            Else
                Return MyBase.GetDecimalAsString(ColumnNames.amount_excent)
            End If
        End Get
        Set(ByVal Value As Decimal)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.amount_excent)
            Else
                Me.amount_excent = MyBase.SetDecimalAsString(ColumnNames.amount_excent, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_cargo_banc() As Decimal
        Get
            If Me.IsColumnNull(ColumnNames.cargo_banc) Then
                Return String.Empty
            Else
                Return MyBase.GetDecimalAsString(ColumnNames.cargo_banc)
            End If
        End Get
        Set(ByVal Value As Decimal)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.cargo_banc)
            Else
                Me.cargo_banc = MyBase.SetDecimalAsString(ColumnNames.cargo_banc, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_cargo_desc() As Decimal
        Get
            If Me.IsColumnNull(ColumnNames.cargo_desc) Then
                Return String.Empty
            Else
                Return MyBase.GetDecimalAsString(ColumnNames.cargo_desc)
            End If
        End Get
        Set(ByVal Value As Decimal)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.cargo_desc)
            Else
                Me.cargo_desc = MyBase.SetDecimalAsString(ColumnNames.cargo_desc, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_excento() As Decimal
        Get
            If Me.IsColumnNull(ColumnNames.excento) Then
                Return String.Empty
            Else
                Return MyBase.GetDecimalAsString(ColumnNames.excento)
            End If
        End Get
        Set(ByVal Value As Decimal)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.excento)
            Else
                Me.excento = MyBase.SetDecimalAsString(ColumnNames.excento, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_impto() As Decimal
        Get
            If Me.IsColumnNull(ColumnNames.impto) Then
                Return String.Empty
            Else
                Return MyBase.GetDecimalAsString(ColumnNames.impto)
            End If
        End Get
        Set(ByVal Value As Decimal)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.impto)
            Else
                Me.impto = MyBase.SetDecimalAsString(ColumnNames.impto, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_invce_status() As Integer
        Get
            If Me.IsColumnNull(ColumnNames.invce_status) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.invce_status)
            End If
        End Get
        Set(ByVal Value As Integer)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.invce_status)
            Else
                Me.invce_status = MyBase.SetIntegerAsString(ColumnNames.invce_status, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_total_amount() As Decimal
        Get
            If Me.IsColumnNull(ColumnNames.total_amount) Then
                Return String.Empty
            Else
                Return MyBase.GetDecimalAsString(ColumnNames.total_amount)
            End If
        End Get
        Set(ByVal Value As Decimal)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.total_amount)
            Else
                Me.total_amount = MyBase.SetDecimalAsString(ColumnNames.total_amount, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_invce_ncf() As String
        Get
            If Me.IsColumnNull(ColumnNames.invce_ncf) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.invce_ncf)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.invce_ncf)
            Else
                Me.invce_ncf = MyBase.SetStringAsString(ColumnNames.invce_ncf, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_vend_code() As Integer
        Get
            If Me.IsColumnNull(ColumnNames.vend_code) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.vend_code)
            End If
        End Get
        Set(ByVal Value As Integer)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.vend_code)
            Else
                Me.vend_code = MyBase.SetIntegerAsString(ColumnNames.vend_code, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_chequera() As Integer
        Get
            If Me.IsColumnNull(ColumnNames.chequera) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.chequera)
            End If
        End Get
        Set(ByVal Value As Integer)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.chequera)
            Else
                Me.chequera = MyBase.SetIntegerAsString(ColumnNames.chequera, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_suc_code() As Integer
        Get
            If Me.IsColumnNull(ColumnNames.suc_code) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.suc_code)
            End If
        End Get
        Set(ByVal Value As Integer)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.suc_code)
            Else
                Me.suc_code = MyBase.SetIntegerAsString(ColumnNames.suc_code, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_invce_datetran() As DateTime
        Get
            If Me.IsColumnNull(ColumnNames.invce_datetran) Then
                Return String.Empty
            Else
                Return MyBase.GetDateTimeAsString(ColumnNames.invce_datetran)
            End If
        End Get
        Set(ByVal Value As DateTime)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.invce_datetran)
            Else
                Me.invce_datetran = MyBase.SetDateTimeAsString(ColumnNames.invce_datetran, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_invce_create() As DateTime
        Get
            If Me.IsColumnNull(ColumnNames.invce_create) Then
                Return String.Empty
            Else
                Return MyBase.GetDateTimeAsString(ColumnNames.invce_create)
            End If
        End Get
        Set(ByVal Value As DateTime)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.invce_create)
            Else
                Me.invce_create = MyBase.SetDateTimeAsString(ColumnNames.invce_create, Value)
            End If
        End Set
    End Property
#End Region

#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffWhereParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffWhereParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "TearOff's"
        Public Class TearOffWhereParameter

            Public Sub New(ByVal clause As WhereClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property invce_serial() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.invce_serial, Parameters.invce_serial)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property type_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.type_code, Parameters.type_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property invce_no() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.invce_no, Parameters.invce_no)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property term_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.term_code, Parameters.term_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property cust_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.cust_code, Parameters.cust_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property invce_date() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.invce_date, Parameters.invce_date)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property detail() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.detail, Parameters.detail)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property due_date() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.due_date, Parameters.due_date)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property amount() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.amount, Parameters.amount)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property itbis() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.itbis, Parameters.itbis)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property amount_grab() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.amount_grab, Parameters.amount_grab)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property amount_excent() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.amount_excent, Parameters.amount_excent)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property cargo_banc() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.cargo_banc, Parameters.cargo_banc)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property cargo_desc() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.cargo_desc, Parameters.cargo_desc)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property excento() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.excento, Parameters.excento)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property impto() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.impto, Parameters.impto)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property invce_status() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.invce_status, Parameters.invce_status)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property total_amount() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.total_amount, Parameters.total_amount)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property invce_ncf() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.invce_ncf, Parameters.invce_ncf)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property vend_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.vend_code, Parameters.vend_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property chequera() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.chequera, Parameters.chequera)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property suc_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.suc_code, Parameters.suc_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property invce_datetran() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.invce_datetran, Parameters.invce_datetran)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property invce_create() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.invce_create, Parameters.invce_create)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Private _clause As WhereClause
        End Class
#End Region

        Public ReadOnly Property invce_serial() As WhereParameter
            Get
                If _Invce_serial_W Is Nothing Then
                    _Invce_serial_W = TearOff.invce_serial
                End If
                Return _Invce_serial_W
            End Get
        End Property
        Public ReadOnly Property type_code() As WhereParameter
            Get
                If _Type_code_W Is Nothing Then
                    _Type_code_W = TearOff.type_code
                End If
                Return _Type_code_W
            End Get
        End Property
        Public ReadOnly Property invce_no() As WhereParameter
            Get
                If _Invce_no_W Is Nothing Then
                    _Invce_no_W = TearOff.invce_no
                End If
                Return _Invce_no_W
            End Get
        End Property
        Public ReadOnly Property term_code() As WhereParameter
            Get
                If _Term_code_W Is Nothing Then
                    _Term_code_W = TearOff.term_code
                End If
                Return _Term_code_W
            End Get
        End Property

        Public ReadOnly Property cust_code() As WhereParameter
            Get
                If _Cust_code_W Is Nothing Then
                    _Cust_code_W = TearOff.cust_code
                End If
                Return _Cust_code_W
            End Get
        End Property
        Public ReadOnly Property invce_date() As WhereParameter
            Get
                If _Invce_date_W Is Nothing Then
                    _Invce_date_W = TearOff.invce_date
                End If
                Return _Invce_date_W
            End Get
        End Property
        Public ReadOnly Property detail() As WhereParameter
            Get
                If _Detail_W Is Nothing Then
                    _Detail_W = TearOff.detail
                End If
                Return _Detail_W
            End Get
        End Property
        Public ReadOnly Property due_date() As WhereParameter
            Get
                If _Due_date_W Is Nothing Then
                    _Due_date_W = TearOff.due_date
                End If
                Return _Due_date_W
            End Get
        End Property
        Public ReadOnly Property amount() As WhereParameter
            Get
                If _Amount_W Is Nothing Then
                    _Amount_W = TearOff.amount
                End If
                Return _Amount_W
            End Get
        End Property
        Public ReadOnly Property itbis() As WhereParameter
            Get
                If _Itbis_W Is Nothing Then
                    _Itbis_W = TearOff.itbis
                End If
                Return _Itbis_W
            End Get
        End Property
        Public ReadOnly Property amount_grab() As WhereParameter
            Get
                If _Amount_grab_W Is Nothing Then
                    _Amount_grab_W = TearOff.amount_grab
                End If
                Return _Amount_grab_W
            End Get
        End Property

        Public ReadOnly Property amount_excent() As WhereParameter
            Get
                If _Amount_excent_W Is Nothing Then
                    _Amount_excent_W = TearOff.amount_excent
                End If
                Return _Amount_excent_W
            End Get
        End Property
        Public ReadOnly Property cargo_banc() As WhereParameter
            Get
                If _Cargo_banc_W Is Nothing Then
                    _Cargo_banc_W = TearOff.cargo_banc
                End If
                Return _Cargo_banc_W
            End Get
        End Property
        Public ReadOnly Property cargo_desc() As WhereParameter
            Get
                If _Cargo_desc_W Is Nothing Then
                    _Cargo_desc_W = TearOff.cargo_desc
                End If
                Return _Cargo_desc_W
            End Get
        End Property
        Public ReadOnly Property excento() As WhereParameter
            Get
                If _Excento_W Is Nothing Then
                    _Excento_W = TearOff.excento
                End If
                Return _Excento_W
            End Get
        End Property
        Public ReadOnly Property impto() As WhereParameter
            Get
                If _Impto_W Is Nothing Then
                    _Impto_W = TearOff.impto
                End If
                Return _Impto_W
            End Get
        End Property
        Public ReadOnly Property invce_status() As WhereParameter
            Get
                If _Invce_status_W Is Nothing Then
                    _Invce_status_W = TearOff.invce_status
                End If
                Return _Invce_status_W
            End Get
        End Property
        Public ReadOnly Property total_amount() As WhereParameter
            Get
                If _Total_amount_W Is Nothing Then
                    _Total_amount_W = TearOff.total_amount
                End If
                Return _Total_amount_W
            End Get
        End Property
        Public ReadOnly Property invce_ncf() As WhereParameter
            Get
                If _Invce_ncf_W Is Nothing Then
                    _Invce_ncf_W = TearOff.invce_ncf
                End If
                Return _Invce_ncf_W
            End Get
        End Property

        Public ReadOnly Property vend_code() As WhereParameter
            Get
                If _Vend_code_W Is Nothing Then
                    _Vend_code_W = TearOff.vend_code
                End If
                Return _Vend_code_W
            End Get
        End Property
        Public ReadOnly Property chequera() As WhereParameter
            Get
                If _Chequera_W Is Nothing Then
                    _Chequera_W = TearOff.chequera
                End If
                Return _Chequera_W
            End Get
        End Property
        Public ReadOnly Property suc_code() As WhereParameter
            Get
                If _Suc_code_W Is Nothing Then
                    _Suc_code_W = TearOff.suc_code
                End If
                Return _Suc_code_W
            End Get
        End Property
        Public ReadOnly Property invce_datetran() As WhereParameter
            Get
                If _Invce_datetran_W Is Nothing Then
                    _Invce_datetran_W = TearOff.invce_datetran
                End If
                Return _Invce_datetran_W
            End Get
        End Property
        Public ReadOnly Property invce_create() As WhereParameter
            Get
                If _Invce_create_W Is Nothing Then
                    _Invce_create_W = TearOff.invce_create
                End If
                Return _Invce_create_W
            End Get
        End Property

        Private _Invce_serial_W As WhereParameter = Nothing
        Private _Type_code_W As WhereParameter = Nothing
        Private _Invce_no_W As WhereParameter = Nothing
        Private _Term_code_W As WhereParameter = Nothing
        Private _Cust_code_W As WhereParameter = Nothing
        Private _Invce_date_W As WhereParameter = Nothing
        Private _Detail_W As WhereParameter = Nothing
        Private _Due_date_W As WhereParameter = Nothing
        Private _Amount_W As WhereParameter = Nothing
        Private _Itbis_W As WhereParameter = Nothing
        Private _Amount_grab_W As WhereParameter = Nothing
        Private _Amount_excent_W As WhereParameter = Nothing
        Private _Cargo_banc_W As WhereParameter = Nothing
        Private _Cargo_desc_W As WhereParameter = Nothing
        Private _Excento_W As WhereParameter = Nothing
        Private _Impto_W As WhereParameter = Nothing
        Private _Invce_status_W As WhereParameter = Nothing
        Private _Total_amount_W As WhereParameter = Nothing
        Private _Invce_ncf_W As WhereParameter = Nothing
        Private _Vend_code_W As WhereParameter = Nothing
        Private _Chequera_W As WhereParameter = Nothing
        Private _Suc_code_W As WhereParameter = Nothing
        Private _Invce_datetran_W As WhereParameter = Nothing
        Private _Invce_create_W As WhereParameter = Nothing

        Public Sub WhereClauseReset()
            _Invce_serial_W = Nothing
            _Type_code_W = Nothing
            _Invce_no_W = Nothing
            _Term_code_W = Nothing
            _Cust_code_W = Nothing
            _Invce_date_W = Nothing
            _Detail_W = Nothing
            _Due_date_W = Nothing
            _Amount_W = Nothing
            _Itbis_W = Nothing
            _Amount_grab_W = Nothing
            _Amount_excent_W = Nothing
            _Cargo_banc_W = Nothing
            _Cargo_desc_W = Nothing
            _Excento_W = Nothing
            _Impto_W = Nothing
            _Invce_status_W = Nothing
            _Total_amount_W = Nothing
            _Invce_ncf_W = Nothing
            _Vend_code_W = Nothing
            _Chequera_W = Nothing
            _Suc_code_W = Nothing
            _Invce_datetran_W = Nothing
            _Invce_create_W = Nothing
            Me._entity.Query.FlushWhereParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffWhereParameter
    End Class

    Public ReadOnly Property Where() As WhereClause
        Get
            If _whereClause Is Nothing Then
                _whereClause = New WhereClause(Me)
            End If

            Return _whereClause
        End Get
    End Property

    Private _whereClause As WhereClause = Nothing
#End Region

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffAggregateParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffAggregateParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "AggregateParameter TearOff's"
        Public Class TearOffAggregateParameter

            Public Sub New(ByVal clause As AggregateClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property Invce_serial() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.invce_serial, Parameters.invce_serial)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Type_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.type_code, Parameters.type_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Invce_no() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.invce_no, Parameters.invce_no)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property Term_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.term_code, Parameters.term_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property Cust_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.cust_code, Parameters.cust_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Invce_date() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.invce_date, Parameters.invce_date)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property Detail() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.detail, Parameters.detail)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Due_date() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.due_date, Parameters.due_date)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Amount() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.amount, Parameters.amount)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Itbis() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.itbis, Parameters.itbis)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Amount_grab() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.amount_grab, Parameters.amount_grab)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Amount_excent() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.amount_excent, Parameters.amount_excent)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Cargo_banc() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.cargo_banc, Parameters.cargo_banc)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Cargo_desc() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.cargo_desc, Parameters.cargo_desc)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Excento() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.excento, Parameters.excento)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Impto() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.impto, Parameters.impto)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Invce_status() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.invce_status, Parameters.invce_status)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Total_amount() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.total_amount, Parameters.total_amount)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Invce_ncf() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.invce_ncf, Parameters.invce_ncf)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Vend_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.vend_code, Parameters.vend_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Chequera() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.chequera, Parameters.chequera)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Suc_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.suc_code, Parameters.suc_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Invce_datetran() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.invce_datetran, Parameters.invce_datetran)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property Invce_create() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.invce_create, Parameters.invce_create)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Private _clause As AggregateClause
        End Class
#End Region

        Public ReadOnly Property Invce_serial() As AggregateParameter
            Get
                If _Invce_serial_W Is Nothing Then
                    _Invce_serial_W = TearOff.Invce_serial
                End If
                Return _Invce_serial_W
            End Get
        End Property
        Public ReadOnly Property Type_code() As AggregateParameter
            Get
                If _Type_code_W Is Nothing Then
                    _Type_code_W = TearOff.Type_code
                End If
                Return _Type_code_W
            End Get
        End Property
        Public ReadOnly Property invce_no() As AggregateParameter
            Get
                If _Invce_no_W Is Nothing Then
                    _Invce_no_W = TearOff.Invce_no
                End If
                Return _Invce_no_W
            End Get
        End Property
        Public ReadOnly Property Term_code() As AggregateParameter
            Get
                If _Term_code_W Is Nothing Then
                    _Term_code_W = TearOff.Term_code
                End If
                Return _Term_code_W
            End Get
        End Property

        Public ReadOnly Property cust_code() As AggregateParameter
            Get
                If _Cust_code_W Is Nothing Then
                    _Cust_code_W = TearOff.Cust_code
                End If
                Return _Cust_code_W
            End Get
        End Property
        Public ReadOnly Property invce_date() As AggregateParameter
            Get
                If _Invce_date_W Is Nothing Then
                    _Invce_date_W = TearOff.Invce_date
                End If
                Return _Invce_date_W
            End Get
        End Property
        Public ReadOnly Property detail() As AggregateParameter
            Get
                If _Detail_W Is Nothing Then
                    _Detail_W = TearOff.Detail
                End If
                Return _Detail_W
            End Get
        End Property
        Public ReadOnly Property due_date() As AggregateParameter
            Get
                If _Due_date_W Is Nothing Then
                    _Due_date_W = TearOff.Due_date
                End If
                Return _Due_date_W
            End Get
        End Property
        Public ReadOnly Property amount() As AggregateParameter
            Get
                If _Amount_W Is Nothing Then
                    _Amount_W = TearOff.Amount
                End If
                Return _Amount_W
            End Get
        End Property
        Public ReadOnly Property itbis() As AggregateParameter
            Get
                If _Itbis_W Is Nothing Then
                    _Itbis_W = TearOff.Itbis
                End If
                Return _Itbis_W
            End Get
        End Property
        Public ReadOnly Property amount_grab() As AggregateParameter
            Get
                If _Amount_grab_W Is Nothing Then
                    _Amount_grab_W = TearOff.Amount_grab
                End If
                Return _Amount_grab_W
            End Get
        End Property

        Public ReadOnly Property amount_excent() As AggregateParameter
            Get
                If _Amount_excent_W Is Nothing Then
                    _Amount_excent_W = TearOff.Amount_excent
                End If
                Return _Amount_excent_W
            End Get
        End Property
        Public ReadOnly Property cargo_banc() As AggregateParameter
            Get
                If _Cargo_banc_W Is Nothing Then
                    _Cargo_banc_W = TearOff.Cargo_banc
                End If
                Return _Cargo_banc_W
            End Get
        End Property
        Public ReadOnly Property cargo_desc() As AggregateParameter
            Get
                If _Cargo_desc_W Is Nothing Then
                    _Cargo_desc_W = TearOff.Cargo_desc
                End If
                Return _Cargo_desc_W
            End Get
        End Property
        Public ReadOnly Property excento() As AggregateParameter
            Get
                If _Excento_W Is Nothing Then
                    _Excento_W = TearOff.Excento
                End If
                Return _Excento_W
            End Get
        End Property
        Public ReadOnly Property impto() As AggregateParameter
            Get
                If _Impto_W Is Nothing Then
                    _Impto_W = TearOff.Impto
                End If
                Return _Impto_W
            End Get
        End Property
        Public ReadOnly Property invce_status() As AggregateParameter
            Get
                If _Invce_status_W Is Nothing Then
                    _Invce_status_W = TearOff.Invce_status
                End If
                Return _Invce_status_W
            End Get
        End Property
        Public ReadOnly Property total_amount() As AggregateParameter
            Get
                If _Total_amount_W Is Nothing Then
                    _Total_amount_W = TearOff.Total_amount
                End If
                Return _Total_amount_W
            End Get
        End Property
        Public ReadOnly Property invce_ncf() As AggregateParameter
            Get
                If _Invce_ncf_W Is Nothing Then
                    _Invce_ncf_W = TearOff.Invce_ncf
                End If
                Return _Invce_ncf_W
            End Get
        End Property
        Public ReadOnly Property vend_code() As AggregateParameter
            Get
                If _Vend_code_W Is Nothing Then
                    _Vend_code_W = TearOff.Vend_code
                End If
                Return _Vend_code_W
            End Get
        End Property
        Public ReadOnly Property chequera() As AggregateParameter
            Get
                If _Chequera_W Is Nothing Then
                    _Chequera_W = TearOff.Chequera
                End If
                Return _Chequera_W
            End Get
        End Property
        Public ReadOnly Property suc_code() As AggregateParameter
            Get
                If _Suc_code_W Is Nothing Then
                    _Suc_code_W = TearOff.Suc_code
                End If
                Return _Suc_code_W
            End Get
        End Property
        Public ReadOnly Property invce_datetran() As AggregateParameter
            Get
                If _Invce_datetran_W Is Nothing Then
                    _Invce_datetran_W = TearOff.Invce_datetran
                End If
                Return _Invce_datetran_W
            End Get
        End Property
        Public ReadOnly Property invce_create() As AggregateParameter
            Get
                If _Invce_create_W Is Nothing Then
                    _Invce_create_W = TearOff.Invce_create
                End If
                Return _Invce_create_W
            End Get
        End Property
        Private _Invce_serial_W As AggregateParameter = Nothing
        Private _Type_code_W As AggregateParameter = Nothing
        Private _Invce_no_W As AggregateParameter = Nothing
        Private _Term_code_W As AggregateParameter = Nothing
        Private _Cust_code_W As AggregateParameter = Nothing
        Private _Invce_date_W As AggregateParameter = Nothing
        Private _Detail_W As AggregateParameter = Nothing
        Private _Due_date_W As AggregateParameter = Nothing
        Private _Amount_W As AggregateParameter = Nothing
        Private _Itbis_W As AggregateParameter = Nothing
        Private _Amount_grab_W As AggregateParameter = Nothing
        Private _Amount_excent_W As AggregateParameter = Nothing
        Private _Cargo_banc_W As AggregateParameter = Nothing
        Private _Cargo_desc_W As AggregateParameter = Nothing
        Private _Excento_W As AggregateParameter = Nothing
        Private _Impto_W As AggregateParameter = Nothing
        Private _Invce_status_W As AggregateParameter = Nothing
        Private _Total_amount_W As AggregateParameter = Nothing
        Private _Invce_ncf_W As AggregateParameter = Nothing
        Private _Vend_code_W As AggregateParameter = Nothing
        Private _Chequera_W As AggregateParameter = Nothing
        Private _Suc_code_W As AggregateParameter = Nothing
        Private _Invce_datetran_W As AggregateParameter = Nothing
        Private _Invce_create_W As AggregateParameter = Nothing

        Public Sub AggregateClauseReset()
            _Invce_serial_W = Nothing
            _Type_code_W = Nothing
            _Invce_no_W = Nothing
            _Term_code_W = Nothing
            _Cust_code_W = Nothing
            _Invce_date_W = Nothing
            _Detail_W = Nothing
            _Due_date_W = Nothing
            _Amount_W = Nothing
            _Itbis_W = Nothing
            _Amount_grab_W = Nothing
            _Amount_excent_W = Nothing
            _Cargo_banc_W = Nothing
            _Cargo_desc_W = Nothing
            _Excento_W = Nothing
            _Impto_W = Nothing
            _Invce_status_W = Nothing
            _Invce_ncf_W = Nothing
            _Total_amount_W = Nothing
            _Vend_code_W = Nothing
            _Chequera_W = Nothing
            _Invce_datetran_W = Nothing
            _Invce_create_W = Nothing
            Me._entity.Query.FlushAggregateParameters()
        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffAggregateParameter
    End Class

    Public ReadOnly Property Aggregate() As AggregateClause
        Get
            If _aggregateClause Is Nothing Then
                _aggregateClause = New AggregateClause(Me)
            End If

            Return _aggregateClause
        End Get
    End Property

    Private _aggregateClause As AggregateClause = Nothing
#End Region

    Protected Overrides Function GetInsertCommand() As IDbCommand

        Dim cmd As OleDbCommand = New OleDbCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_ccinvcemInsert]"

        CreateParameters(cmd)

        Return cmd

    End Function

    Protected Overrides Function GetUpdateCommand() As IDbCommand

        Dim cmd As OleDbCommand = New OleDbCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_ccinvcemUpdate]"

        CreateParameters(cmd)

        Return cmd

    End Function

    Protected Overrides Function GetDeleteCommand() As IDbCommand

        Dim cmd As OleDbCommand = New OleDbCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_ccinvcemDelete]"

        Dim p As OleDbParameter
        p = cmd.Parameters.Add(Parameters.invce_serial)
        p.SourceColumn = ColumnNames.invce_serial
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.suc_code)
        p.SourceColumn = ColumnNames.suc_code
        p.SourceVersion = DataRowVersion.Current

        Return cmd

    End Function

    Private Sub CreateParameters(ByVal cmd As OleDbCommand)

        Dim p As OleDbParameter
        p = cmd.Parameters.Add(Parameters.invce_serial)
        p.SourceColumn = ColumnNames.invce_serial
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.type_code)
        p.SourceColumn = ColumnNames.type_code
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.invce_no)
        p.SourceColumn = ColumnNames.invce_no
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.term_code)
        p.SourceColumn = ColumnNames.term_code
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.cust_code)
        p.SourceColumn = ColumnNames.cust_code
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.invce_date)
        p.SourceColumn = ColumnNames.invce_date
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.detail)
        p.SourceColumn = ColumnNames.detail
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.due_date)
        p.SourceColumn = ColumnNames.due_date
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.amount)
        p.SourceColumn = ColumnNames.amount
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.itbis)
        p.SourceColumn = ColumnNames.itbis
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.amount_grab)
        p.SourceColumn = ColumnNames.amount_grab
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.amount_excent)
        p.SourceColumn = ColumnNames.amount_excent
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.cargo_banc)
        p.SourceColumn = ColumnNames.cargo_banc
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.cargo_desc)
        p.SourceColumn = ColumnNames.cargo_desc
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.excento)
        p.SourceColumn = ColumnNames.excento
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.impto)
        p.SourceColumn = ColumnNames.impto
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.invce_status)
        p.SourceColumn = ColumnNames.invce_status
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.total_amount)
        p.SourceColumn = ColumnNames.total_amount
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.invce_ncf)
        p.SourceColumn = ColumnNames.invce_ncf
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.vend_code)
        p.SourceColumn = ColumnNames.vend_code
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.chequera)
        p.SourceColumn = ColumnNames.chequera
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.suc_code)
        p.SourceColumn = ColumnNames.suc_code
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.invce_datetran)
        p.SourceColumn = ColumnNames.invce_datetran
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.invce_datetran)
        p.SourceColumn = ColumnNames.invce_create
        p.SourceVersion = DataRowVersion.Current
    End Sub
End Class

