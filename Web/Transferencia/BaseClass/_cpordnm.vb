
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class OleDbEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.7)

Imports System
Imports System.Data
Imports System.Data.OleDb
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public Class _cpordnm

	Inherits OleDbEntity

		Public Sub New() 
			Me.QuerySource = "cpordnm"
			Me.MappingName = "cpordnm"
		End Sub

	'=================================================================
	'  Public Overrides Sub AddNew()
	'=================================================================
	'
	'=================================================================
	Public Overrides Sub AddNew()
		MyBase.AddNew()
				
	End Sub
	
	Public Overrides Sub FlushData()
		Me._whereClause = nothing
		Me._aggregateClause = nothing		
		MyBase.FlushData()
	End Sub
	
	
	Public Overrides Function GetAutoKeyColumn() As String
			Return ""
	End Function
	
	'=================================================================
	'  	Public Function LoadAll() As Boolean
	'=================================================================
	'  Loads all of the records in the database, and sets the currentRow to the first row
	'=================================================================
	Public Function LoadAll() As Boolean
	
		Dim parameters As ListDictionary = Nothing
		
		
    	Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_cpordnmLoadAll]", parameters)
		
	End Function

	'=================================================================
	' Public Overridable Function LoadByPrimaryKey()  As Boolean
	'=================================================================
	'  Loads a single row of via the primary key
	'=================================================================
    Public Overridable Function LoadByPrimaryKey(ByVal ordn_serial As Integer) As Boolean
        Dim parameters As ListDictionary = New ListDictionary
        parameters.Add(_cpordnm.Parameters.ordn_serial, ordn_serial)
        
        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_cpordnmLoadByPrimaryKey]", parameters)

    End Function

#Region "Parameters"
    Protected Class Parameters

        Public Shared ReadOnly Property ordn_serial() As OleDbParameter
            Get
                Return New OleDbParameter("@ordn_serial", OleDbType.Integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property type_code() As OleDbParameter
            Get
                Return New OleDbParameter("@type_code", OleDbType.Char, 3)
            End Get
        End Property

        Public Shared ReadOnly Property prov_code() As OleDbParameter
            Get
                Return New OleDbParameter("@prov_code", OleDbType.Integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property ordn_date() As OleDbParameter
            Get
                Return New OleDbParameter("@ordn_date", OleDbType.DBDate, 0)
            End Get
        End Property

        Public Shared ReadOnly Property ordn_number() As OleDbParameter
            Get
                Return New OleDbParameter("@ordn_number", OleDbType.Integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property ordn_note() As OleDbParameter
            Get
                Return New OleDbParameter("@ordn_note", OleDbType.varchar, 20)
            End Get
        End Property

        Public Shared ReadOnly Property ordn_status() As OleDbParameter
            Get
                Return New OleDbParameter("@ordn_status", OleDbType.integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property total_amount() As OleDbParameter
            Get
                Return New OleDbParameter("@total_amount", OleDbType.decimal, 12,2)
            End Get
        End Property

        Public Shared ReadOnly Property whse_code() As OleDbParameter
            Get
                Return New OleDbParameter("@whse_code", OleDbType.integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property total_itbis() As OleDbParameter
            Get
                Return New OleDbParameter("@total_itbis", OleDbType.decimal,12,2)
            End Get
        End Property

        Public Shared ReadOnly Property maximo() As OleDbParameter
            Get
                Return New OleDbParameter("@maximo", OleDbType.Integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property minimo() As OleDbParameter
            Get
                Return New OleDbParameter("@minimo", OleDbType.integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property reorden() As OleDbParameter
            Get
                Return New OleDbParameter("@reorden", OleDbType.Integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property periodo() As OleDbParameter
            Get
                Return New OleDbParameter("@periodo", OleDbType.integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property suc_code() As OleDbParameter
            Get
                Return New OleDbParameter("@suc_code", OleDbType.Integer, 0)
            End Get
        End Property

    End Class
#End Region

#Region "ColumnNames"
    Public Class ColumnNames

        Public Const ordn_serial As String = "ordn_serial"
        Public Const type_code As String = "type_code"
        Public Const prov_code As String = "prov_code"
        Public Const ordn_date As String = "ordn_date"
        Public Const ordn_number As String = "ordn_number"
        Public Const ordn_note As String = "ordn_note"
        Public Const ordn_status As String = "ordn_status"
        Public Const total_amount As String = "total_amount"
        Public Const whse_code As String = "whse_code"
        Public Const total_itbis As String = "total_itbis"
        Public Const maximo As String = "maximo"
        Public Const minimo As String = "minimo"
        Public Const reorden As String = "reorden"
        Public Const periodo As String = "periodo"
        Public Const suc_code As String = "suc_code"

        Public Shared Function ToPropertyName(ByVal columnName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(ordn_serial) = _cpordnm.PropertyNames.ordn_serial
                ht(type_code) = _cpordnm.PropertyNames.type_code
                ht(prov_code) = _cpordnm.PropertyNames.prov_code
                ht(ordn_date) = _cpordnm.PropertyNames.ordn_date
                ht(ordn_number) = _cpordnm.PropertyNames.ordn_number
                ht(ordn_note) = _cpordnm.PropertyNames.ordn_note
                ht(ordn_status) = _cpordnm.PropertyNames.ordn_status
                ht(total_amount) = _cpordnm.PropertyNames.total_amount
                ht(whse_code) = _cpordnm.PropertyNames.whse_code
                ht(total_itbis) = _cpordnm.PropertyNames.total_itbis
                ht(maximo) = _cpordnm.PropertyNames.maximo
                ht(minimo) = _cpordnm.PropertyNames.minimo
                ht(reorden) = _cpordnm.PropertyNames.reorden
                ht(periodo) = _cpordnm.PropertyNames.periodo
                ht(suc_code) = _cpordnm.PropertyNames.suc_code

            End If

            Return CType(ht(columnName), String)

        End Function

        Private Shared ht As Hashtable = Nothing
    End Class
#End Region

#Region "PropertyNames"
    Public Class PropertyNames

        Public Const ordn_serial As String = "ordn_serial"
        Public Const type_code As String = "type_code"
        Public Const prov_code As String = "prov_code"
        Public Const ordn_date As String = "ordn_date"
        Public Const ordn_number As String = "ordn_number"
        Public Const ordn_note As String = "ordn_note"
        Public Const ordn_status As String = "ordn_status"
        Public Const total_amount As String = "total_amount"
        Public Const whse_code As String = "whse_code"
        Public Const total_itbis As String = "total_itbis"
        Public Const maximo As String = "maximo"
        Public Const minimo As String = "minimo"
        Public Const reorden As String = "reorden"
        Public Const periodo As String = "periodo"
        Public Const suc_code As String = "suc_code"

        Public Shared Function ToColumnName(ByVal propertyName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(ordn_serial) = _cpordnm.ColumnNames.ordn_serial
                ht(type_code) = _cpordnm.ColumnNames.type_code
                ht(prov_code) = _cpordnm.ColumnNames.prov_code
                ht(ordn_date) = _cpordnm.ColumnNames.ordn_date
                ht(ordn_number) = _cpordnm.ColumnNames.ordn_number
                ht(ordn_note) = _cpordnm.ColumnNames.ordn_note
                ht(ordn_status) = _cpordnm.ColumnNames.ordn_status
                ht(total_amount) = _cpordnm.ColumnNames.total_amount
                ht(whse_code) = _cpordnm.ColumnNames.whse_code
                ht(total_itbis) = _cpordnm.ColumnNames.total_itbis
                ht(maximo) = _cpordnm.ColumnNames.maximo
                ht(minimo) = _cpordnm.ColumnNames.minimo
                ht(reorden) = _cpordnm.ColumnNames.reorden
                ht(periodo) = _cpordnm.ColumnNames.periodo
                ht(suc_code) = _cpordnm.ColumnNames.suc_code

            End If

            Return CType(ht(propertyName), String)

        End Function

        Private Shared ht As Hashtable = Nothing

    End Class
#End Region

#Region "StringPropertyNames"
    Public Class StringPropertyNames

        Public Const ordn_serial As String = "s_ordn_serial"
        Public Const type_code As String = "s_type_code"
        Public Const prov_code As String = "s_prov_code"
        Public Const ordn_date As String = "s_ordn_date"
        Public Const ordn_number As String = "s_ordn_number"
        Public Const ordn_note As String = "s_ordn_note"
        Public Const ordn_status As String = "s_ordn_status"
        Public Const total_amount As String = "s_total_amount"
        Public Const whse_code As String = "s_whse_code"
        Public Const total_itbis As String = "s_total_itbis"
        Public Const maximo As String = "s_maximo"
        Public Const minimo As String = "s_minimo"
        Public Const reorden As String = "s_reorden"
        Public Const periodo As String = "s_periodo"
        Public Const suc_code As String = "s_suc_code"

    End Class
#End Region

#Region "Properties"
    Public Overridable Property ordn_serial() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.ordn_serial)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.ordn_serial, Value)
        End Set
    End Property

    Public Overridable Property type_code() As String
        Get
            Return MyBase.GetString(ColumnNames.type_code)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.type_code, Value)
        End Set
    End Property

    Public Overridable Property prov_code() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.prov_code)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.prov_code, Value)
        End Set
    End Property
    Public Overridable Property ordn_date() As DateTime
        Get
            Return MyBase.GetDateTime(ColumnNames.ordn_date)
        End Get
        Set(ByVal Value As DateTime)
            MyBase.SetDateTime(ColumnNames.ordn_date, Value)
        End Set
    End Property

    Public Overridable Property ordn_number() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.ordn_number)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.ordn_number, Value)
        End Set
    End Property

    Public Overridable Property ordn_note() As String
        Get
            Return MyBase.GetString(ColumnNames.ordn_note)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.ordn_note, Value)
        End Set
    End Property

    Public Overridable Property ordn_status() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.ordn_status)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.ordn_status, Value)
        End Set
    End Property

    Public Overridable Property total_amount() As Decimal
        Get
            Return MyBase.GetDecimal(ColumnNames.total_amount)
        End Get
        Set(ByVal Value As Decimal)
            MyBase.SetDecimal(ColumnNames.total_amount, Value)
        End Set
    End Property

    Public Overridable Property whse_code() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.whse_code)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.whse_code, Value)
        End Set
    End Property

    Public Overridable Property total_itbis() As Decimal
        Get
            Return MyBase.GetDecimal(ColumnNames.total_itbis)
        End Get
        Set(ByVal Value As Decimal)
            MyBase.SetDecimal(ColumnNames.total_itbis, Value)
        End Set
    End Property

    Public Overridable Property maximo() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.maximo)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.maximo, Value)
        End Set
    End Property

    Public Overridable Property minimo() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.minimo)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.minimo, Value)
        End Set
    End Property

    Public Overridable Property reorden() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.reorden)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.reorden, Value)
        End Set
    End Property

    Public Overridable Property periodo() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.periodo)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.periodo, Value)
        End Set
    End Property

    Public Overridable Property suc_code() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.suc_code)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.suc_code, Value)
        End Set
    End Property

#End Region

#Region "String Properties"

    Public Overridable Property s_ordn_serial() As String
        Get
            If Me.IsColumnNull(ColumnNames.ordn_serial) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.ordn_serial)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.ordn_serial)
            Else
                Me.ordn_serial = MyBase.SetIntegerAsString(ColumnNames.ordn_serial, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_type_code() As String
        Get
            If Me.IsColumnNull(ColumnNames.type_code) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.type_code)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.type_code)
            Else
                Me.type_code = MyBase.SetStringAsString(ColumnNames.type_code, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_prov_code() As String
        Get
            If Me.IsColumnNull(ColumnNames.prov_code) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.prov_code)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.prov_code)
            Else
                Me.prov_code = MyBase.SetIntegerAsString(ColumnNames.prov_code, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_ordn_date() As String
        Get
            If Me.IsColumnNull(ColumnNames.prov_code) Then
                Return String.Empty
            Else
                Return MyBase.GetDateTimeAsString(ColumnNames.ordn_date)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.ordn_date)
            Else
                Me.ordn_date = MyBase.SetDateTimeAsString(ColumnNames.ordn_date, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_ordn_number() As String
        Get
            If Me.IsColumnNull(ColumnNames.ordn_number) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.ordn_number)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.ordn_number)
            Else
                Me.ordn_number = MyBase.SetIntegerAsString(ColumnNames.ordn_number, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_ordn_note() As String
        Get
            If Me.IsColumnNull(ColumnNames.ordn_note) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.ordn_note)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.ordn_note)
            Else
                Me.ordn_note = MyBase.SetStringAsString(ColumnNames.ordn_note, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_ordn_status() As String
        Get
            If Me.IsColumnNull(ColumnNames.ordn_status) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.ordn_status)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.ordn_status)
            Else
                Me.ordn_status = MyBase.SetIntegerAsString(ColumnNames.ordn_status, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_total_amount() As String
        Get
            If Me.IsColumnNull(ColumnNames.total_amount) Then
                Return String.Empty
            Else
                Return MyBase.GetDecimalAsString(ColumnNames.total_amount)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.total_amount)
            Else
                Me.total_amount = MyBase.SetDecimalAsString(ColumnNames.total_amount, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_whse_code() As String
        Get
            If Me.IsColumnNull(ColumnNames.whse_code) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.whse_code)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.whse_code)
            Else
                Me.whse_code = MyBase.SetIntegerAsString(ColumnNames.whse_code, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_total_itbis() As String
        Get
            If Me.IsColumnNull(ColumnNames.total_itbis) Then
                Return String.Empty
            Else
                Return MyBase.GetDecimalAsString(ColumnNames.total_itbis)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.total_itbis)
            Else
                Me.total_itbis = MyBase.SetDecimalAsString(ColumnNames.total_itbis, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_maximo() As String
        Get
            If Me.IsColumnNull(ColumnNames.maximo) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.maximo)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.maximo)
            Else
                Me.maximo = MyBase.SetIntegerAsString(ColumnNames.maximo, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_minimo() As String
        Get
            If Me.IsColumnNull(ColumnNames.minimo) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.minimo)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.minimo)
            Else
                Me.minimo = MyBase.SetIntegerAsString(ColumnNames.minimo, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_reorden() As String
        Get
            If Me.IsColumnNull(ColumnNames.reorden) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.reorden)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.reorden)
            Else
                Me.reorden = MyBase.SetIntegerAsString(ColumnNames.reorden, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_periodo() As String
        Get
            If Me.IsColumnNull(ColumnNames.periodo) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.periodo)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.periodo)
            Else
                Me.periodo = MyBase.SetIntegerAsString(ColumnNames.periodo, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_suc_code() As String
        Get
            If Me.IsColumnNull(ColumnNames.suc_code) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.suc_code)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.suc_code)
            Else
                Me.suc_code = MyBase.SetIntegerAsString(ColumnNames.suc_code, Value)
            End If
        End Set
    End Property


#End Region

#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffWhereParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffWhereParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "TearOff's"
        Public Class TearOffWhereParameter

            Public Sub New(ByVal clause As WhereClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property ordn_serial() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.ordn_serial, Parameters.ordn_serial)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property type_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.type_code, Parameters.type_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property prov_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.prov_code, Parameters.prov_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property ordn_date() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.ordn_date, Parameters.ordn_date)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ordn_number() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.ordn_number, Parameters.ordn_number)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ordn_note() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.ordn_note, Parameters.ordn_note)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ordn_status() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.ordn_status, Parameters.ordn_status)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property total_amount() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.total_amount, Parameters.total_amount)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property whse_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.whse_code, Parameters.whse_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property total_itbis() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.total_itbis, Parameters.total_itbis)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property maximo() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.maximo, Parameters.maximo)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property minimo() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.minimo, Parameters.minimo)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property reorden() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.reorden, Parameters.reorden)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property periodo() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.periodo, Parameters.periodo)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property suc_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.suc_code, Parameters.suc_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Private _clause As WhereClause
        End Class
#End Region

        Public ReadOnly Property ordn_serial() As WhereParameter
            Get
                If _ordn_serial_W Is Nothing Then
                    _ordn_serial_W = TearOff.ordn_serial
                End If
                Return _ordn_serial_W
            End Get
        End Property

        Public ReadOnly Property type_code() As WhereParameter
            Get
                If _type_code_W Is Nothing Then
                    _type_code_W = TearOff.type_code
                End If
                Return _type_code_W
            End Get
        End Property

        Public ReadOnly Property prov_code() As WhereParameter
            Get
                If _prov_code_W Is Nothing Then
                    _prov_code_W = TearOff.prov_code
                End If
                Return _prov_code_W
            End Get
        End Property
        Public ReadOnly Property ordn_date() As WhereParameter
            Get
                If _ordn_date_W Is Nothing Then
                    _ordn_date_W = TearOff.ordn_date
                End If
                Return _ordn_date_W
            End Get
        End Property

        Public ReadOnly Property ordn_number() As WhereParameter
            Get
                If _ordn_number_W Is Nothing Then
                    _ordn_number_W = TearOff.ordn_number
                End If
                Return _ordn_number_W
            End Get
        End Property

        Public ReadOnly Property ordn_note() As WhereParameter
            Get
                If _ordn_note_W Is Nothing Then
                    _ordn_note_W = TearOff.ordn_note
                End If
                Return _ordn_note_W
            End Get
        End Property

        Public ReadOnly Property ordn_status() As WhereParameter
            Get
                If _ordn_status_W Is Nothing Then
                    _ordn_status_W = TearOff.ordn_status
                End If
                Return _ordn_status_W
            End Get
        End Property

        Public ReadOnly Property total_amount() As WhereParameter
            Get
                If _total_amount_W Is Nothing Then
                    _total_amount_W = TearOff.total_amount
                End If
                Return _total_amount_W
            End Get
        End Property

        Public ReadOnly Property whse_code() As WhereParameter
            Get
                If _whse_code_W Is Nothing Then
                    _whse_code_W = TearOff.whse_code
                End If
                Return _whse_code_W
            End Get
        End Property

        Public ReadOnly Property total_itbis() As WhereParameter
            Get
                If _total_itbis_W Is Nothing Then
                    _total_itbis_W = TearOff.total_itbis
                End If
                Return _total_itbis_W
            End Get
        End Property

        Public ReadOnly Property maximo() As WhereParameter
            Get
                If _maximo_W Is Nothing Then
                    _maximo_W = TearOff.maximo
                End If
                Return _maximo_W
            End Get
        End Property

        Public ReadOnly Property minimo() As WhereParameter
            Get
                If _minimo_W Is Nothing Then
                    _minimo_W = TearOff.minimo
                End If
                Return _minimo_W
            End Get
        End Property

        Public ReadOnly Property reorden() As WhereParameter
            Get
                If _reorden_W Is Nothing Then
                    _reorden_W = TearOff.reorden
                End If
                Return _reorden_W
            End Get
        End Property

        Public ReadOnly Property periodo() As WhereParameter
            Get
                If _periodo_W Is Nothing Then
                    _periodo_W = TearOff.periodo
                End If
                Return _periodo_W
            End Get
        End Property

        Public ReadOnly Property suc_code() As WhereParameter
            Get
                If _suc_code_W Is Nothing Then
                    _suc_code_W = TearOff.suc_code
                End If
                Return _suc_code_W
            End Get
        End Property

        Private _ordn_serial_W As WhereParameter = Nothing
        Private _type_code_W As WhereParameter = Nothing
        Private _prov_code_W As WhereParameter = Nothing
        Private _ordn_date_W As WhereParameter = Nothing
        Private _ordn_number_W As WhereParameter = Nothing
        Private _ordn_note_W As WhereParameter = Nothing
        Private _ordn_status_W As WhereParameter = Nothing
        Private _total_amount_W As WhereParameter = Nothing
        Private _whse_code_W As WhereParameter = Nothing
        Private _total_itbis_W As WhereParameter = Nothing
        Private _maximo_W As WhereParameter = Nothing
        Private _minimo_W As WhereParameter = Nothing
        Private _reorden_W As WhereParameter = Nothing
        Private _periodo_W As WhereParameter = Nothing
        Private _suc_code_W As WhereParameter = Nothing

        Public Sub WhereClauseReset()
            _ordn_serial_W = Nothing
            _type_code_W = Nothing
            _prov_code_W = Nothing
            _ordn_date_W = Nothing
            _ordn_number_W = Nothing
            _ordn_note_W = Nothing
            _ordn_status_W = Nothing
            _total_amount_W = Nothing
            _whse_code_W = Nothing
            _total_itbis_W = Nothing
            _maximo_W = Nothing
            _minimo_W = Nothing
            _reorden_W = Nothing
            _periodo_W = Nothing
            _suc_code_W = Nothing
            Me._entity.Query.FlushWhereParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffWhereParameter
    End Class

    Public ReadOnly Property Where() As WhereClause
        Get
            If _whereClause Is Nothing Then
                _whereClause = New WhereClause(Me)
            End If

            Return _whereClause
        End Get
    End Property

    Private _whereClause As WhereClause = Nothing
#End Region

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffAggregateParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffAggregateParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "AggregateParameter TearOff's"
        Public Class TearOffAggregateParameter

            Public Sub New(ByVal clause As AggregateClause)
                Me._clause = clause
            End Sub


            Public ReadOnly Property ordn_serial() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ordn_serial, Parameters.ordn_serial)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property type_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.type_code, Parameters.type_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property prov_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.prov_code, Parameters.prov_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property ordn_date() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ordn_date, Parameters.ordn_date)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ordn_number() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ordn_number, Parameters.ordn_number)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ordn_note() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ordn_note, Parameters.ordn_note)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property ordn_status() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ordn_status, Parameters.ordn_status)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property total_amount() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.total_amount, Parameters.total_amount)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property whse_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.whse_code, Parameters.whse_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property total_itbis() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.total_itbis, Parameters.total_itbis)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property maximo() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.maximo, Parameters.maximo)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property minimo() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.minimo, Parameters.minimo)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property reorden() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.reorden, Parameters.reorden)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property periodo() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.periodo, Parameters.periodo)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property suc_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.suc_code, Parameters.suc_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Private _clause As AggregateClause
        End Class
#End Region

        Public ReadOnly Property ordn_serial() As AggregateParameter
            Get
                If _ordn_serial_W Is Nothing Then
                    _ordn_serial_W = TearOff.ordn_serial
                End If
                Return _ordn_serial_W
            End Get
        End Property

        Public ReadOnly Property type_code() As AggregateParameter
            Get
                If _type_code_W Is Nothing Then
                    _type_code_W = TearOff.type_code
                End If
                Return _type_code_W
            End Get
        End Property

        Public ReadOnly Property prov_code() As AggregateParameter
            Get
                If _prov_code_W Is Nothing Then
                    _prov_code_W = TearOff.prov_code
                End If
                Return _prov_code_W
            End Get
        End Property
        Public ReadOnly Property ordn_date() As AggregateParameter
            Get
                If _ordn_date_W Is Nothing Then
                    _prov_code_W = TearOff.ordn_date
                End If
                Return _ordn_date_W
            End Get
        End Property

        Public ReadOnly Property ordn_number() As AggregateParameter
            Get
                If _ordn_number_W Is Nothing Then
                    _ordn_number_W = TearOff.ordn_number
                End If
                Return _ordn_number_W
            End Get
        End Property

        Public ReadOnly Property ordn_note() As AggregateParameter
            Get
                If _ordn_note_W Is Nothing Then
                    _ordn_note_W = TearOff.ordn_note
                End If
                Return _ordn_note_W
            End Get
        End Property

        Public ReadOnly Property ordn_status() As AggregateParameter
            Get
                If _ordn_status_W Is Nothing Then
                    _ordn_status_W = TearOff.ordn_status
                End If
                Return _ordn_status_W
            End Get
        End Property

        Public ReadOnly Property total_amount() As AggregateParameter
            Get
                If _total_amount_W Is Nothing Then
                    _total_amount_W = TearOff.total_amount
                End If
                Return _total_amount_W
            End Get
        End Property

        Public ReadOnly Property whse_code() As AggregateParameter
            Get
                If _whse_code_W Is Nothing Then
                    _whse_code_W = TearOff.whse_code
                End If
                Return _whse_code_W
            End Get
        End Property

        Public ReadOnly Property total_itbis() As AggregateParameter
            Get
                If _total_itbis_W Is Nothing Then
                    _total_itbis_W = TearOff.total_itbis
                End If
                Return _total_itbis_W
            End Get
        End Property

        Public ReadOnly Property maximo() As AggregateParameter
            Get
                If _maximo_W Is Nothing Then
                    _maximo_W = TearOff.maximo
                End If
                Return _maximo_W
            End Get
        End Property

        Public ReadOnly Property minimo() As AggregateParameter
            Get
                If _minimo_W Is Nothing Then
                    _minimo_W = TearOff.minimo
                End If
                Return _minimo_W
            End Get
        End Property

        Public ReadOnly Property reorden() As AggregateParameter
            Get
                If _reorden_W Is Nothing Then
                    _reorden_W = TearOff.reorden
                End If
                Return _reorden_W
            End Get
        End Property

        Public ReadOnly Property periodo() As AggregateParameter
            Get
                If _periodo_W Is Nothing Then
                    _periodo_W = TearOff.periodo
                End If
                Return _periodo_W
            End Get
        End Property

        Public ReadOnly Property suc_code() As AggregateParameter
            Get
                If _suc_code_W Is Nothing Then
                    _suc_code_W = TearOff.suc_code
                End If
                Return _suc_code_W
            End Get
        End Property

        Private _ordn_serial_W As AggregateParameter = Nothing
        Private _type_code_W As AggregateParameter = Nothing
        Private _prov_code_W As AggregateParameter = Nothing
        Private _ordn_date_W As AggregateParameter = Nothing
        Private _ordn_number_W As AggregateParameter = Nothing
        Private _ordn_note_W As AggregateParameter = Nothing
        Private _ordn_status_W As AggregateParameter = Nothing
        Private _total_amount_W As AggregateParameter = Nothing
        Private _whse_code_W As AggregateParameter = Nothing
        Private _total_itbis_W As AggregateParameter = Nothing
        Private _maximo_W As AggregateParameter = Nothing
        Private _minimo_W As AggregateParameter = Nothing
        Private _reorden_W As AggregateParameter = Nothing
        Private _periodo_W As AggregateParameter = Nothing
        Private _suc_code_W As AggregateParameter = Nothing

        Public Sub AggregateClauseReset()
            _ordn_serial_W = Nothing
            _type_code_W = Nothing
            _prov_code_W = Nothing
            _ordn_date_W = Nothing
            _ordn_number_W = Nothing
            _ordn_note_W = Nothing
            _ordn_status_W = Nothing
            _total_amount_W = Nothing
            _whse_code_W = Nothing
            _total_itbis_W = Nothing
            _maximo_W = Nothing
            _minimo_W = Nothing
            _reorden_W = Nothing
            _periodo_W = Nothing
            _suc_code_W = Nothing
            Me._entity.Query.FlushAggregateParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffAggregateParameter
    End Class

    Public ReadOnly Property Aggregate() As AggregateClause
        Get
            If _aggregateClause Is Nothing Then
                _aggregateClause = New AggregateClause(Me)
            End If

            Return _aggregateClause
        End Get
    End Property

    Private _aggregateClause As AggregateClause = Nothing
#End Region

    Protected Overrides Function GetInsertCommand() As IDbCommand

        Dim cmd As OleDbCommand = New OleDbCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_cpordnmInsert]"

        CreateParameters(cmd)

        Return cmd

    End Function

    Protected Overrides Function GetUpdateCommand() As IDbCommand

        Dim cmd As OleDbCommand = New OleDbCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_cpordnmUpdate]"

        CreateParameters(cmd)

        Return cmd

    End Function

    Protected Overrides Function GetDeleteCommand() As IDbCommand

        Dim cmd As OleDbCommand = New OleDbCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_cpordnmDelete]"

        Dim p As OleDbParameter
        p = cmd.Parameters.Add(Parameters.ordn_serial)
        p.SourceColumn = ColumnNames.ordn_serial
        p.SourceVersion = DataRowVersion.Current


        Return cmd

    End Function

    Private Sub CreateParameters(ByVal cmd As OleDbCommand)

        Dim p As OleDbParameter
        p = cmd.Parameters.Add(Parameters.ordn_serial)
        p.SourceColumn = ColumnNames.ordn_serial
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.type_code)
        p.SourceColumn = ColumnNames.type_code
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.prov_code)
        p.SourceColumn = ColumnNames.prov_code
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.ordn_date)
        p.SourceColumn = ColumnNames.ordn_date
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.ordn_number)
        p.SourceColumn = ColumnNames.ordn_number
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.ordn_note)
        p.SourceColumn = ColumnNames.ordn_note
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.ordn_status)
        p.SourceColumn = ColumnNames.ordn_status
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.total_amount)
        p.SourceColumn = ColumnNames.total_amount
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.whse_code)
        p.SourceColumn = ColumnNames.whse_code
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.total_itbis)
        p.SourceColumn = ColumnNames.total_itbis
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.maximo)
        p.SourceColumn = ColumnNames.maximo
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.minimo)
        p.SourceColumn = ColumnNames.minimo
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.reorden)
        p.SourceColumn = ColumnNames.reorden
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.periodo)
        p.SourceColumn = ColumnNames.periodo
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.suc_code)
        p.SourceColumn = ColumnNames.suc_code
        p.SourceVersion = DataRowVersion.Current

    End Sub

End Class


    
