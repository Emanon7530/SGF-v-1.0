
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class OleDbEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.7)

Imports System
Imports System.Data
Imports System.Data.OleDb
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public Class _cgtranrd
    Inherits OleDbEntity

    Public Sub New()
        Me.QuerySource = "cgtranrd"
        Me.MappingName = "cgtranrd"
    End Sub

    '=================================================================
    '  Public Overrides Sub AddNew()
    '=================================================================
    '
    '=================================================================
    Public Overrides Sub AddNew()
        MyBase.AddNew()

    End Sub

    Public Overrides Sub FlushData()
        Me._whereClause = Nothing
        Me._aggregateClause = Nothing
        MyBase.FlushData()
    End Sub


    Public Overrides Function GetAutoKeyColumn() As String
        Return ""
    End Function

    '=================================================================
    '  	Public Function LoadAll() As Boolean
    '=================================================================
    '  Loads all of the records in the database, and sets the currentRow to the first row
    '=================================================================
    Public Function LoadAll() As Boolean

        Dim parameters As ListDictionary = Nothing


        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_cgtranrdLoadAll]", parameters)

    End Function

    '=================================================================
    ' Public Overridable Function LoadByPrimaryKey()  As Boolean
    '=================================================================
    '  Loads a single row of via the primary key
    '=================================================================
    Public Overridable Function LoadByPrimaryKey(ByVal tranr_serial As Integer, ByVal acct_no As String, ByVal line_no As Integer, ByVal suc_code As Integer) As Boolean

        Dim parameters As ListDictionary = New ListDictionary
        parameters.Add(_cgtranrd.Parameters.tranr_serial, tranr_serial)
        parameters.Add(_cgtranrd.Parameters.acct_no, acct_no)
        parameters.Add(_cgtranrd.Parameters.line_no, line_no)
        parameters.Add(_cgtranrd.Parameters.suc_code, suc_code)


        Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_cgtranrdLoadByPrimaryKey]", parameters)

    End Function

#Region "Parameters"
    Protected Class Parameters

        Public Shared ReadOnly Property tranr_serial() As OleDbParameter
            Get
                Return New OleDbParameter("@tranr_serial", OleDbType.Integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property acct_no() As OleDbParameter
            Get
                Return New OleDbParameter("@acct_no", OleDbType.VarChar, 10)
            End Get
        End Property

        Public Shared ReadOnly Property line_no() As OleDbParameter
            Get
                Return New OleDbParameter("@line_no", OleDbType.Integer, 0)
            End Get
        End Property
        Public Shared ReadOnly Property tranr_detail() As OleDbParameter
            Get
                Return New OleDbParameter("@tranr_detail", OleDbType.VarChar, 40)
            End Get
        End Property

        Public Shared ReadOnly Property dept_code() As OleDbParameter
            Get
                Return New OleDbParameter("@dept_code", OleDbType.Integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property debit_credit() As OleDbParameter
            Get
                Return New OleDbParameter("@debit_credit", OleDbType.Integer, 0)
            End Get
        End Property

        Public Shared ReadOnly Property amount() As OleDbParameter
            Get
                Return New OleDbParameter("@amount", OleDbType.Decimal, 12, 2)
            End Get
        End Property
        Public Shared ReadOnly Property suc_code() As OleDbParameter
            Get
                Return New OleDbParameter("@suc_code", OleDbType.Integer, 0)
            End Get
        End Property

    End Class
#End Region

#Region "ColumnNames"
    Public Class ColumnNames

        Public Const tranr_serial As String = "tranr_serial"
        Public Const acct_no As String = "acct_no"
        Public Const line_no As String = "line_no"
        Public Const tranr_detail As String = "tranr_detail"
        Public Const dept_code As String = "dept_code"
        Public Const debit_credit As String = "debit_credit"
        Public Const amount As String = "amount"
        Public Const suc_code As String = "suc_code"
        
        Public Shared Function ToPropertyName(ByVal columnName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(tranr_serial) = _cgtranrd.PropertyNames.tranr_serial
                ht(acct_no) = _cgtranrd.PropertyNames.acct_no
                ht(line_no) = _cgtranrd.PropertyNames.line_no
                ht(tranr_detail) = _cgtranrd.PropertyNames.tranr_detail
                ht(dept_code) = _cgtranrd.PropertyNames.dept_code
                ht(debit_credit) = _cgtranrd.PropertyNames.debit_credit
                ht(amount) = _cgtranrd.PropertyNames.amount
                ht(suc_code) = _cgtranrd.PropertyNames.suc_code

            End If

            Return CType(ht(columnName), String)

        End Function

        Private Shared ht As Hashtable = Nothing
    End Class
#End Region

#Region "PropertyNames"
    Public Class PropertyNames

        Public Const tranr_serial As String = "tranr_serial"
        Public Const acct_no As String = "acct_no"
        Public Const line_no As String = "line_no"
        Public Const tranr_detail As String = "tranr_detail"
        Public Const dept_code As String = "dept_code"
        Public Const debit_credit As String = "debit_credit"
        Public Const amount As String = "amount"
        Public Const suc_code As String = "suc_code"
        
        Public Shared Function ToColumnName(ByVal propertyName As String) As String

            If ht Is Nothing Then

                ht = New Hashtable

                ht(tranr_serial) = _cgtranrd.ColumnNames.tranr_serial
                ht(acct_no) = _cgtranrd.ColumnNames.acct_no
                ht(line_no) = _cgtranrd.ColumnNames.line_no
                ht(tranr_detail) = _cgtranrd.ColumnNames.tranr_detail
                ht(dept_code) = _cgtranrd.ColumnNames.dept_code
                ht(debit_credit) = _cgtranrd.ColumnNames.debit_credit
                ht(amount) = _cgtranrd.ColumnNames.amount
                ht(suc_code) = _cgtranrd.ColumnNames.suc_code

            End If

            Return CType(ht(propertyName), String)

        End Function

        Private Shared ht As Hashtable = Nothing

    End Class
#End Region

#Region "StringPropertyNames"
    Public Class StringPropertyNames

        Public Const tranr_serial As String = "s_tranr_serial"
        Public Const acct_no As String = "s_acct_no"
        Public Const line_no As String = "s_line_no"
        Public Const tranr_detail As String = "s_tranr_detail"
        Public Const dept_code As String = "s_dept_code"
        Public Const debit_credit As String = "s_debit_credit"
        Public Const amount As String = "s_amount"
        Public Const suc_code As String = "s_suc_code"

    End Class
#End Region

#Region "Properties"
    Public Overridable Property tranr_serial() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.tranr_serial)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.tranr_serial, Value)
        End Set
    End Property

    Public Overridable Property acct_no() As String
        Get
            Return MyBase.GetString(ColumnNames.acct_no)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.acct_no, Value)
        End Set
    End Property

    Public Overridable Property line_no() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.line_no)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.line_no, Value)
        End Set
    End Property

    Public Overridable Property tranr_detail() As String
        Get
            Return MyBase.GetString(ColumnNames.tranr_detail)
        End Get
        Set(ByVal Value As String)
            MyBase.SetString(ColumnNames.tranr_detail, Value)
        End Set
    End Property

    Public Overridable Property dept_code() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.dept_code)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.dept_code, Value)
        End Set
    End Property

    Public Overridable Property debit_credit() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.debit_credit)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.debit_credit, Value)
        End Set
    End Property

    Public Overridable Property amount() As Decimal
        Get
            Return MyBase.GetDecimal(ColumnNames.amount)
        End Get
        Set(ByVal Value As Decimal)
            MyBase.SetDecimal(ColumnNames.amount, Value)
        End Set
    End Property
    Public Overridable Property suc_code() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.suc_code)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.suc_code, Value)
        End Set
    End Property

#End Region

#Region "String Properties"

    Public Overridable Property s_tranr_serial() As String
        Get
            If Me.IsColumnNull(ColumnNames.tranr_serial) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.tranr_serial)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.tranr_serial)
            Else
                Me.tranr_serial = MyBase.SetIntegerAsString(ColumnNames.tranr_serial, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_acct_no() As String
        Get
            If Me.IsColumnNull(ColumnNames.acct_no) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.acct_no)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.acct_no)
            Else
                Me.acct_no = MyBase.SetStringAsString(ColumnNames.acct_no, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_line_no() As String
        Get
            If Me.IsColumnNull(ColumnNames.line_no) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.line_no)
            End If
        End Get
        Set(ByVal value As String)
            If String.Empty = value Then
                Me.SetColumnNull(ColumnNames.line_no)
            Else
                Me.line_no = MyBase.SetIntegerAsString(ColumnNames.line_no, value)
            End If
        End Set
    End Property

    Public Overridable Property s_tranr_detail() As String
        Get
            If Me.IsColumnNull(ColumnNames.tranr_detail) Then
                Return String.Empty
            Else
                Return MyBase.GetStringAsString(ColumnNames.tranr_detail)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.tranr_detail)
            Else
                Me.tranr_detail = MyBase.SetStringAsString(ColumnNames.tranr_detail, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_dept_code() As String
        Get
            If Me.IsColumnNull(ColumnNames.dept_code) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.dept_code)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.dept_code)
            Else
                Me.dept_code = MyBase.SetIntegerAsString(ColumnNames.dept_code, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_debit_credit() As String
        Get
            If Me.IsColumnNull(ColumnNames.debit_credit) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.debit_credit)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.debit_credit)
            Else
                Me.debit_credit = MyBase.SetIntegerAsString(ColumnNames.debit_credit, Value)
            End If
        End Set
    End Property

    Public Overridable Property s_amount() As String
        Get
            If Me.IsColumnNull(ColumnNames.amount) Then
                Return String.Empty
            Else
                Return MyBase.GetDecimalAsString(ColumnNames.amount)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.amount)
            Else
                Me.amount = MyBase.SetDecimalAsString(ColumnNames.amount, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_suc_code() As String
        Get
            If Me.IsColumnNull(ColumnNames.suc_code) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.suc_code)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.suc_code)
            Else
                Me.suc_code = MyBase.SetIntegerAsString(ColumnNames.suc_code, Value)
            End If
        End Set
    End Property

#End Region

#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffWhereParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffWhereParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "TearOff's"
        Public Class TearOffWhereParameter

            Public Sub New(ByVal clause As WhereClause)
                Me._clause = clause
            End Sub

            Public ReadOnly Property tranr_serial() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.tranr_serial, Parameters.tranr_serial)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property acct_no() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.acct_no, Parameters.acct_no)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property line_no() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.line_no, Parameters.line_no)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property tranr_detail() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.tranr_detail, Parameters.tranr_detail)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property dept_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.dept_code, Parameters.dept_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property debit_credit() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.debit_credit, Parameters.debit_credit)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property amount() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.amount, Parameters.amount)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property suc_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.suc_code, Parameters.suc_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Private _clause As WhereClause
        End Class
#End Region

        Public ReadOnly Property tranr_serial() As WhereParameter
            Get
                If _tranr_serial_W Is Nothing Then
                    _tranr_serial_W = TearOff.tranr_serial
                End If
                Return _tranr_serial_W
            End Get
        End Property

        Public ReadOnly Property acct_no() As WhereParameter
            Get
                If _acct_no_W Is Nothing Then
                    _acct_no_W = TearOff.acct_no
                End If
                Return _acct_no_W
            End Get
        End Property

        Public ReadOnly Property line_no() As WhereParameter
            Get
                If _line_no_W Is Nothing Then
                    _line_no_W = TearOff.line_no
                End If
                Return _line_no_W
            End Get
        End Property

        Public ReadOnly Property tranr_detail() As WhereParameter
            Get
                If _tranr_detail_W Is Nothing Then
                    _tranr_detail_W = TearOff.tranr_detail
                End If
                Return _tranr_detail_W
            End Get
        End Property

        Public ReadOnly Property dept_code() As WhereParameter
            Get
                If _dept_code_W Is Nothing Then
                    _dept_code_W = TearOff.dept_code
                End If
                Return _dept_code_W
            End Get
        End Property

        Public ReadOnly Property debit_credit() As WhereParameter
            Get
                If _debit_credit_W Is Nothing Then
                    _debit_credit_W = TearOff.debit_credit
                End If
                Return _debit_credit_W
            End Get
        End Property

        Public ReadOnly Property amount() As WhereParameter
            Get
                If _amount_W Is Nothing Then
                    _amount_W = TearOff.amount
                End If
                Return _amount_W
            End Get
        End Property
        Public ReadOnly Property suc_code() As WhereParameter
            Get
                If _suc_code_W Is Nothing Then
                    _suc_code_W = TearOff.suc_code
                End If
                Return _suc_code_W
            End Get
        End Property

        Private _tranr_serial_W As WhereParameter = Nothing
        Private _acct_no_W As WhereParameter = Nothing
        Private _line_no_W As WhereParameter = Nothing
        Private _tranr_detail_W As WhereParameter = Nothing
        Private _dept_code_W As WhereParameter = Nothing
        Private _debit_credit_W As WhereParameter = Nothing
        Private _amount_W As WhereParameter = Nothing
        Private _suc_code_W As WhereParameter = Nothing

        Public Sub WhereClauseReset()

            _tranr_serial_W = Nothing
            _acct_no_W = Nothing
            _line_no_W = Nothing
            _tranr_detail_W = Nothing
            _dept_code_W = Nothing
            _debit_credit_W = Nothing
            _amount_W = Nothing
            _suc_code_W = Nothing
            Me._entity.Query.FlushWhereParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffWhereParameter
    End Class

    Public ReadOnly Property Where() As WhereClause
        Get
            If _whereClause Is Nothing Then
                _whereClause = New WhereClause(Me)
            End If

            Return _whereClause
        End Get
    End Property

    Private _whereClause As WhereClause = Nothing
#End Region

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub

        Public ReadOnly Property TearOff() As TearOffAggregateParameter
            Get
                If _tearOff Is Nothing Then
                    _tearOff = New TearOffAggregateParameter(Me)
                End If

                Return _tearOff
            End Get
        End Property

#Region "AggregateParameter TearOff's"
        Public Class TearOffAggregateParameter

            Public Sub New(ByVal clause As AggregateClause)
                Me._clause = clause
            End Sub

            Public ReadOnly Property tranr_serial() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.tranr_serial, Parameters.tranr_serial)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property acct_no() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.acct_no, Parameters.acct_no)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property line_no() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.line_no, Parameters.line_no)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property tranr_detail() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.tranr_detail, Parameters.tranr_detail)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property dept_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.dept_code, Parameters.dept_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property debit_credit() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.debit_credit, Parameters.debit_credit)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property amount() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.amount, Parameters.amount)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property suc_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.suc_code, Parameters.suc_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Private _clause As AggregateClause
        End Class
#End Region

        Public ReadOnly Property tranr_serial() As AggregateParameter
            Get
                If _tranr_serial_W Is Nothing Then
                    _tranr_serial_W = TearOff.tranr_serial
                End If
                Return _tranr_serial_W
            End Get
        End Property

        Public ReadOnly Property acct_no() As AggregateParameter
            Get
                If _acct_no_W Is Nothing Then
                    _acct_no_W = TearOff.acct_no
                End If
                Return _acct_no_W
            End Get
        End Property

        Public ReadOnly Property line_no() As AggregateParameter
            Get
                If _line_no_W Is Nothing Then
                    _line_no_W = TearOff.line_no
                End If
                Return _line_no_W
            End Get
        End Property

        Public ReadOnly Property tranr_detail() As AggregateParameter
            Get
                If _tranr_detail_W Is Nothing Then
                    _tranr_detail_W = TearOff.tranr_detail
                End If
                Return _tranr_detail_W
            End Get
        End Property

        Public ReadOnly Property dept_code() As AggregateParameter
            Get
                If _dept_code_W Is Nothing Then
                    _dept_code_W = TearOff.dept_code
                End If
                Return _dept_code_W
            End Get
        End Property

        Public ReadOnly Property debit_credit() As AggregateParameter
            Get
                If _debit_credit_W Is Nothing Then
                    _debit_credit_W = TearOff.debit_credit
                End If
                Return _debit_credit_W
            End Get
        End Property

        Public ReadOnly Property amount() As AggregateParameter
            Get
                If _amount_W Is Nothing Then
                    _amount_W = TearOff.amount
                End If
                Return _amount_W
            End Get
        End Property
        Public ReadOnly Property suc_code() As AggregateParameter
            Get
                If _suc_code_W Is Nothing Then
                    _suc_code_W = TearOff.suc_code
                End If
                Return _suc_code_W
            End Get
        End Property

        Private _tranr_serial_W As AggregateParameter = Nothing
        Private _acct_no_W As AggregateParameter = Nothing
        Private _line_no_W As AggregateParameter = Nothing
        Private _tranr_detail_W As AggregateParameter = Nothing
        Private _dept_code_W As AggregateParameter = Nothing
        Private _debit_credit_W As AggregateParameter = Nothing
        Private _amount_W As AggregateParameter = Nothing
        Private _suc_code_W As AggregateParameter = Nothing
        Public Sub AggregateClauseReset()

            _tranr_serial_W = Nothing
            _acct_no_W = Nothing
            _line_no_W = Nothing
            _tranr_detail_W = Nothing
            _dept_code_W = Nothing
            _debit_credit_W = Nothing
            _amount_W = Nothing
            _suc_code_W = Nothing
            Me._entity.Query.FlushAggregateParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffAggregateParameter
    End Class

    Public ReadOnly Property Aggregate() As AggregateClause
        Get
            If _aggregateClause Is Nothing Then
                _aggregateClause = New AggregateClause(Me)
            End If

            Return _aggregateClause
        End Get
    End Property

    Private _aggregateClause As AggregateClause = Nothing
#End Region

    Protected Overrides Function GetInsertCommand() As IDbCommand

        Dim cmd As OleDbCommand = New OleDbCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_cgtranrdInsert]"

        CreateParameters(cmd)

        Return cmd

    End Function

    Protected Overrides Function GetUpdateCommand() As IDbCommand

        Dim cmd As OleDbCommand = New OleDbCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_cgtranrdUpdate]"

        CreateParameters(cmd)

        Return cmd

    End Function

    Protected Overrides Function GetDeleteCommand() As IDbCommand

        Dim cmd As OleDbCommand = New OleDbCommand
        cmd.CommandType = CommandType.StoredProcedure
        cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_cgtranrdDelete]"

        Dim p As OleDbParameter
        p = cmd.Parameters.Add(Parameters.tranr_serial)
        p.SourceColumn = ColumnNames.tranr_serial
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.acct_no)
        p.SourceColumn = ColumnNames.acct_no
        p.SourceVersion = DataRowVersion.Current


        Return cmd

    End Function

    Private Sub CreateParameters(ByVal cmd As OleDbCommand)

        Dim p As OleDbParameter
        p = cmd.Parameters.Add(Parameters.tranr_serial)
        p.SourceColumn = ColumnNames.tranr_serial
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.acct_no)
        p.SourceColumn = ColumnNames.acct_no
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.line_no)
        p.SourceColumn = ColumnNames.line_no
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.tranr_detail)
        p.SourceColumn = ColumnNames.tranr_detail
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.dept_code)
        p.SourceColumn = ColumnNames.dept_code
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.debit_credit)
        p.SourceColumn = ColumnNames.debit_credit
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.amount)
        p.SourceColumn = ColumnNames.amount
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.suc_code)
        p.SourceColumn = ColumnNames.suc_code
        p.SourceVersion = DataRowVersion.Current

    End Sub

End Class



