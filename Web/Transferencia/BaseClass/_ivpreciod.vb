
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class OleDbEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.7)

Imports System
Imports System.Data
Imports System.Data.OleDb
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _ivpreciod
	Inherits OleDbEntity

		Public Sub New() 
			Me.QuerySource = "ivpreciod"
			Me.MappingName = "ivpreciod"
		End Sub

	'=================================================================
	'  Public Overrides Sub AddNew()
	'=================================================================
	'
	'=================================================================
	Public Overrides Sub AddNew()
		MyBase.AddNew()
				
	End Sub
	
	Public Overrides Sub FlushData()
		Me._whereClause = nothing
		Me._aggregateClause = nothing		
		MyBase.FlushData()
	End Sub
	
	
	Public Overrides Function GetAutoKeyColumn() As String
			Return ""
	End Function
	
	'=================================================================
	'  	Public Function LoadAll() As Boolean
	'=================================================================
	'  Loads all of the records in the database, and sets the currentRow to the first row
	'=================================================================
	Public Function LoadAll() As Boolean
	
		Dim parameters As ListDictionary = Nothing
		
		
    	Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_ivpreciodLoadAll]", parameters)
		
	End Function

	'=================================================================
	' Public Overridable Function LoadByPrimaryKey()  As Boolean
	'=================================================================
	'  Loads a single row of via the primary key
	'=================================================================
	Public Overridable Function LoadByPrimaryKey(ByVal Precio_code As Integer, ByVal Line_no As Integer, ByVal Item_code As String) As Boolean

		Dim parameters As ListDictionary = New ListDictionary()
		parameters.Add(_ivpreciod.Parameters.Precio_code, Precio_code)

parameters.Add(_ivpreciod.Parameters.Line_no, Line_no)

parameters.Add(_ivpreciod.Parameters.Item_code, Item_code)

		
		Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_ivpreciodLoadByPrimaryKey]", parameters)

	End Function

	#Region "Parameters"
	Protected class Parameters 
		
		Public Shared ReadOnly Property Precio_code As OleDbParameter
			Get
				Return New OleDbParameter("@Precio_code", OleDbType.Integer, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Line_no As OleDbParameter
			Get
				Return New OleDbParameter("@Line_no", OleDbType.Integer, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Item_code As OleDbParameter
			Get
				Return New OleDbParameter("@Item_code", OleDbType.VarChar, 10)
			End Get
		End Property
		
		Public Shared ReadOnly Property Costo As OleDbParameter
			Get
				Return New OleDbParameter("@Costo", OleDbType.Numeric, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Benef As OleDbParameter
			Get
				Return New OleDbParameter("@Benef", OleDbType.Numeric, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Precio As OleDbParameter
			Get
				Return New OleDbParameter("@Precio", OleDbType.Numeric, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Unidad As OleDbParameter
			Get
				Return New OleDbParameter("@Unidad", OleDbType.Char, 10)
			End Get
		End Property
		
	End Class
	#End Region	

	#Region "ColumnNames"
	Public class ColumnNames
		
        Public Const Precio_code As String = "precio_code"
        Public Const Line_no As String = "line_no"
        Public Const Item_code As String = "item_code"
        Public Const Costo As String = "costo"
        Public Const Benef As String = "benef"
        Public Const Precio As String = "precio"
        Public Const Unidad As String = "unidad"

		Shared Public Function ToPropertyName(ByVal columnName As String) As String

			If ht Is Nothing Then
			
				ht = new Hashtable
				
				ht(Precio_code) = _ivpreciod.PropertyNames.Precio_code
				ht(Line_no) = _ivpreciod.PropertyNames.Line_no
				ht(Item_code) = _ivpreciod.PropertyNames.Item_code
				ht(Costo) = _ivpreciod.PropertyNames.Costo
				ht(Benef) = _ivpreciod.PropertyNames.Benef
				ht(Precio) = _ivpreciod.PropertyNames.Precio
				ht(Unidad) = _ivpreciod.PropertyNames.Unidad

			End If
			
			Return CType(ht(columnName), String)
			
		End Function
		
		Shared Private ht  As Hashtable = Nothing		 
	End Class
	#End Region	
	
	#Region "PropertyNames"
	Public class PropertyNames
		
        Public Const Precio_code As String = "Precio_code"
        Public Const Line_no As String = "Line_no"
        Public Const Item_code As String = "Item_code"
        Public Const Costo As String = "Costo"
        Public Const Benef As String = "Benef"
        Public Const Precio As String = "Precio"
        Public Const Unidad As String = "Unidad"

		Shared Public Function ToColumnName(ByVal propertyName As String) As String

			If ht Is Nothing Then
			
				ht = new Hashtable
				
				ht(Precio_code) = _ivpreciod.ColumnNames.Precio_code
				ht(Line_no) = _ivpreciod.ColumnNames.Line_no
				ht(Item_code) = _ivpreciod.ColumnNames.Item_code
				ht(Costo) = _ivpreciod.ColumnNames.Costo
				ht(Benef) = _ivpreciod.ColumnNames.Benef
				ht(Precio) = _ivpreciod.ColumnNames.Precio
				ht(Unidad) = _ivpreciod.ColumnNames.Unidad

			End If
			
			Return CType(ht(propertyName), String)
			
		End Function
		
		Shared Private ht  As Hashtable = Nothing
		
	End Class
	#End Region	
	
	#Region "StringPropertyNames"
	Public class StringPropertyNames
		
        Public Const Precio_code As String = "s_Precio_code"
        Public Const Line_no As String = "s_Line_no"
        Public Const Item_code As String = "s_Item_code"
        Public Const Costo As String = "s_Costo"
        Public Const Benef As String = "s_Benef"
        Public Const Precio As String = "s_Precio"
        Public Const Unidad As String = "s_Unidad"

	End Class
	#End Region		
	
	#Region "Properties" 
		Public Overridable Property Precio_code As Integer
			Get
				Return MyBase.GetInteger(ColumnNames.Precio_code)
			End Get
			Set(ByVal Value As Integer)
				MyBase.SetInteger(ColumnNames.Precio_code, Value)
			End Set
		End Property

		Public Overridable Property Line_no As Integer
			Get
				Return MyBase.GetInteger(ColumnNames.Line_no)
			End Get
			Set(ByVal Value As Integer)
				MyBase.SetInteger(ColumnNames.Line_no, Value)
			End Set
		End Property

		Public Overridable Property Item_code As String
			Get
				Return MyBase.GetString(ColumnNames.Item_code)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Item_code, Value)
			End Set
		End Property

		Public Overridable Property Costo As Decimal
			Get
				Return MyBase.GetDecimal(ColumnNames.Costo)
			End Get
			Set(ByVal Value As Decimal)
				MyBase.SetDecimal(ColumnNames.Costo, Value)
			End Set
		End Property

		Public Overridable Property Benef As Decimal
			Get
				Return MyBase.GetDecimal(ColumnNames.Benef)
			End Get
			Set(ByVal Value As Decimal)
				MyBase.SetDecimal(ColumnNames.Benef, Value)
			End Set
		End Property

		Public Overridable Property Precio As Decimal
			Get
				Return MyBase.GetDecimal(ColumnNames.Precio)
			End Get
			Set(ByVal Value As Decimal)
				MyBase.SetDecimal(ColumnNames.Precio, Value)
			End Set
		End Property

		Public Overridable Property Unidad As String
			Get
				Return MyBase.GetString(ColumnNames.Unidad)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Unidad, Value)
			End Set
		End Property


	#End Region  
	
	#Region "String Properties" 

		Public Overridable Property s_Precio_code As String
			Get
				If Me.IsColumnNull(ColumnNames.Precio_code) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(ColumnNames.Precio_code)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Precio_code)
				Else
					Me.Precio_code = MyBase.SetIntegerAsString(ColumnNames.Precio_code, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Line_no As String
			Get
				If Me.IsColumnNull(ColumnNames.Line_no) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(ColumnNames.Line_no)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Line_no)
				Else
					Me.Line_no = MyBase.SetIntegerAsString(ColumnNames.Line_no, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Item_code As String
			Get
				If Me.IsColumnNull(ColumnNames.Item_code) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Item_code)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Item_code)
				Else
					Me.Item_code = MyBase.SetStringAsString(ColumnNames.Item_code, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Costo As String
			Get
				If Me.IsColumnNull(ColumnNames.Costo) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(ColumnNames.Costo)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Costo)
				Else
					Me.Costo = MyBase.SetDecimalAsString(ColumnNames.Costo, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Benef As String
			Get
				If Me.IsColumnNull(ColumnNames.Benef) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(ColumnNames.Benef)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Benef)
				Else
					Me.Benef = MyBase.SetDecimalAsString(ColumnNames.Benef, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Precio As String
			Get
				If Me.IsColumnNull(ColumnNames.Precio) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(ColumnNames.Precio)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Precio)
				Else
					Me.Precio = MyBase.SetDecimalAsString(ColumnNames.Precio, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Unidad As String
			Get
				If Me.IsColumnNull(ColumnNames.Unidad) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Unidad)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Unidad)
				Else
					Me.Unidad = MyBase.SetStringAsString(ColumnNames.Unidad, Value)
				End If
			End Set
		End Property


	#End Region  	

	#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffWhereParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffWhereParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region "TearOff's"
		Public class TearOffWhereParameter

			Public Sub New(ByVal clause As WhereClause)
				Me._clause = clause
			End Sub
		
	
			Public ReadOnly Property Precio_code() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Precio_code, Parameters.Precio_code)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Line_no() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Line_no, Parameters.Line_no)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Item_code() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Item_code, Parameters.Item_code)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Costo() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Costo, Parameters.Costo)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Benef() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Benef, Parameters.Benef)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Precio() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Precio, Parameters.Precio)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Unidad() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Unidad, Parameters.Unidad)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property


			Private _clause as WhereClause
		End Class
		#End Region	

		Public ReadOnly Property Precio_code() As WhereParameter 
			Get
				If _Precio_code_W Is Nothing Then
					_Precio_code_W = TearOff.Precio_code
				End If
				Return _Precio_code_W
			End Get
		End Property

		Public ReadOnly Property Line_no() As WhereParameter 
			Get
				If _Line_no_W Is Nothing Then
					_Line_no_W = TearOff.Line_no
				End If
				Return _Line_no_W
			End Get
		End Property

		Public ReadOnly Property Item_code() As WhereParameter 
			Get
				If _Item_code_W Is Nothing Then
					_Item_code_W = TearOff.Item_code
				End If
				Return _Item_code_W
			End Get
		End Property

		Public ReadOnly Property Costo() As WhereParameter 
			Get
				If _Costo_W Is Nothing Then
					_Costo_W = TearOff.Costo
				End If
				Return _Costo_W
			End Get
		End Property

		Public ReadOnly Property Benef() As WhereParameter 
			Get
				If _Benef_W Is Nothing Then
					_Benef_W = TearOff.Benef
				End If
				Return _Benef_W
			End Get
		End Property

		Public ReadOnly Property Precio() As WhereParameter 
			Get
				If _Precio_W Is Nothing Then
					_Precio_W = TearOff.Precio
				End If
				Return _Precio_W
			End Get
		End Property

		Public ReadOnly Property Unidad() As WhereParameter 
			Get
				If _Unidad_W Is Nothing Then
					_Unidad_W = TearOff.Unidad
				End If
				Return _Unidad_W
			End Get
		End Property

		Private _Precio_code_W As WhereParameter = Nothing
		Private _Line_no_W As WhereParameter = Nothing
		Private _Item_code_W As WhereParameter = Nothing
		Private _Costo_W As WhereParameter = Nothing
		Private _Benef_W As WhereParameter = Nothing
		Private _Precio_W As WhereParameter = Nothing
		Private _Unidad_W As WhereParameter = Nothing

			Public Sub WhereClauseReset()

			_Precio_code_W = Nothing
			_Line_no_W = Nothing
			_Item_code_W = Nothing
			_Costo_W = Nothing
			_Benef_W = Nothing
			_Precio_W = Nothing
			_Unidad_W = Nothing
				Me._entity.Query.FlushWhereParameters()

			End Sub
	
		Private _entity As BusinessEntity
		Private _tearOff As TearOffWhereParameter
    End Class	

	Public ReadOnly Property Where() As WhereClause
		Get
			If _whereClause Is Nothing Then
				_whereClause = New WhereClause(Me)
			End If
	
			Return _whereClause
		End Get
	End Property
	
	Private _whereClause As WhereClause = Nothing	
#End Region	

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffAggregateParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffAggregateParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region "AggregateParameter TearOff's"
		Public class TearOffAggregateParameter

			Public Sub New(ByVal clause As AggregateClause)
				Me._clause = clause
			End Sub
		
	
		Public ReadOnly Property Precio_code() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Precio_code, Parameters.Precio_code)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Line_no() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Line_no, Parameters.Line_no)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Item_code() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Item_code, Parameters.Item_code)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Costo() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Costo, Parameters.Costo)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Benef() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Benef, Parameters.Benef)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Precio() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Precio, Parameters.Precio)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Unidad() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Unidad, Parameters.Unidad)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property


			Private _clause as AggregateClause
		End Class
		#End Region	

		Public ReadOnly Property Precio_code() As AggregateParameter 
			Get
				If _Precio_code_W Is Nothing Then
					_Precio_code_W = TearOff.Precio_code
				End If
				Return _Precio_code_W
			End Get
		End Property

		Public ReadOnly Property Line_no() As AggregateParameter 
			Get
				If _Line_no_W Is Nothing Then
					_Line_no_W = TearOff.Line_no
				End If
				Return _Line_no_W
			End Get
		End Property

		Public ReadOnly Property Item_code() As AggregateParameter 
			Get
				If _Item_code_W Is Nothing Then
					_Item_code_W = TearOff.Item_code
				End If
				Return _Item_code_W
			End Get
		End Property

		Public ReadOnly Property Costo() As AggregateParameter 
			Get
				If _Costo_W Is Nothing Then
					_Costo_W = TearOff.Costo
				End If
				Return _Costo_W
			End Get
		End Property

		Public ReadOnly Property Benef() As AggregateParameter 
			Get
				If _Benef_W Is Nothing Then
					_Benef_W = TearOff.Benef
				End If
				Return _Benef_W
			End Get
		End Property

		Public ReadOnly Property Precio() As AggregateParameter 
			Get
				If _Precio_W Is Nothing Then
					_Precio_W = TearOff.Precio
				End If
				Return _Precio_W
			End Get
		End Property

		Public ReadOnly Property Unidad() As AggregateParameter 
			Get
				If _Unidad_W Is Nothing Then
					_Unidad_W = TearOff.Unidad
				End If
				Return _Unidad_W
			End Get
		End Property

		Private _Precio_code_W As AggregateParameter = Nothing
		Private _Line_no_W As AggregateParameter = Nothing
		Private _Item_code_W As AggregateParameter = Nothing
		Private _Costo_W As AggregateParameter = Nothing
		Private _Benef_W As AggregateParameter = Nothing
		Private _Precio_W As AggregateParameter = Nothing
		Private _Unidad_W As AggregateParameter = Nothing

		Public Sub AggregateClauseReset()

		_Precio_code_W = Nothing
		_Line_no_W = Nothing
		_Item_code_W = Nothing
		_Costo_W = Nothing
		_Benef_W = Nothing
		_Precio_W = Nothing
		_Unidad_W = Nothing
			Me._entity.Query.FlushAggregateParameters()

		End Sub
	
		Private _entity As BusinessEntity
		Private _tearOff As TearOffAggregateParameter
    End Class	

	Public ReadOnly Property Aggregate() As AggregateClause
		Get
			If _aggregateClause Is Nothing Then
				_aggregateClause = New AggregateClause(Me)
			End If
	
			Return _aggregateClause
		End Get
	End Property
	
	Private _aggregateClause As AggregateClause = Nothing	
#End Region	

	Protected Overrides Function GetInsertCommand() As IDbCommand
	
		Dim cmd As OleDbCommand = New OleDbCommand
		cmd.CommandType = CommandType.StoredProcedure
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_ivpreciodInsert]" 
	    
		CreateParameters(cmd)
		    
		Return cmd 

  	End Function
	
	Protected Overrides Function GetUpdateCommand() As IDbCommand
	
		Dim cmd As OleDbCommand = New OleDbCommand
		cmd.CommandType = CommandType.StoredProcedure    
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_ivpreciodUpdate]" 
		
		CreateParameters(cmd) 
		    
		Return cmd
	
	End Function	
	
	Protected Overrides Function GetDeleteCommand() As IDbCommand
	
		Dim cmd As OleDbCommand = New OleDbCommand
		cmd.CommandType = CommandType.StoredProcedure    
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_ivpreciodDelete]" 
		
		Dim p As OleDbParameter
		p = cmd.Parameters.Add(Parameters.Precio_code)
		p.SourceColumn = ColumnNames.Precio_code
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Line_no)
		p.SourceColumn = ColumnNames.Line_no
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Item_code)
		p.SourceColumn = ColumnNames.Item_code
		p.SourceVersion = DataRowVersion.Current

  
		Return cmd
	
	End Function	
	
	Private Sub CreateParameters(ByVal cmd As OleDbCommand)
	
		Dim p As OleDbParameter
		p = cmd.Parameters.Add(Parameters.Precio_code)
		p.SourceColumn = ColumnNames.Precio_code
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Line_no)
		p.SourceColumn = ColumnNames.Line_no
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Item_code)
		p.SourceColumn = ColumnNames.Item_code
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Costo)
		p.SourceColumn = ColumnNames.Costo
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Benef)
		p.SourceColumn = ColumnNames.Benef
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Precio)
		p.SourceColumn = ColumnNames.Precio
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Unidad)
		p.SourceColumn = ColumnNames.Unidad
		p.SourceVersion = DataRowVersion.Current


	End Sub	

End Class

