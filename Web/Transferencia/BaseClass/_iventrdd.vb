
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class OleDbEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.7)

Imports System
Imports System.Data
Imports System.Data.OleDb
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _iventrdd
	Inherits OleDbEntity

		Public Sub New() 
			Me.QuerySource = "iventrdd"
			Me.MappingName = "iventrdd"
		End Sub

	'=================================================================
	'  Public Overrides Sub AddNew()
	'=================================================================
	'
	'=================================================================
	Public Overrides Sub AddNew()
		MyBase.AddNew()
				
	End Sub
	
	Public Overrides Sub FlushData()
		Me._whereClause = nothing
		Me._aggregateClause = nothing		
		MyBase.FlushData()
	End Sub
	
	
	Public Overrides Function GetAutoKeyColumn() As String
			Return ""
	End Function
	
	'=================================================================
	'  	Public Function LoadAll() As Boolean
	'=================================================================
	'  Loads all of the records in the database, and sets the currentRow to the first row
	'=================================================================
	Public Function LoadAll() As Boolean
	
		Dim parameters As ListDictionary = Nothing
		
		
    	Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_iventrddLoadAll]", parameters)
		
	End Function

	'=================================================================
	' Public Overridable Function LoadByPrimaryKey()  As Boolean
	'=================================================================
	'  Loads a single row of via the primary key
	'=================================================================
	Public Overridable Function LoadByPrimaryKey(ByVal Entr_serial As Integer, ByVal Line_no As Integer) As Boolean

		Dim parameters As ListDictionary = New ListDictionary()
		parameters.Add(_iventrdd.Parameters.Entr_serial, Entr_serial)

parameters.Add(_iventrdd.Parameters.Line_no, Line_no)

		
		Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_iventrddLoadByPrimaryKey]", parameters)

	End Function

	#Region "Parameters"
	Protected class Parameters 
		
		Public Shared ReadOnly Property Entr_serial As OleDbParameter
			Get
				Return New OleDbParameter("@Entr_serial", OleDbType.Integer, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Line_no As OleDbParameter
			Get
				Return New OleDbParameter("@Line_no", OleDbType.Integer, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Whse_code As OleDbParameter
			Get
				Return New OleDbParameter("@Whse_code", OleDbType.Integer, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Item_code As OleDbParameter
			Get
				Return New OleDbParameter("@Item_code", OleDbType.VarChar, 10)
			End Get
		End Property
		
		Public Shared ReadOnly Property Unit_code As OleDbParameter
			Get
				Return New OleDbParameter("@Unit_code", OleDbType.Char, 5)
			End Get
		End Property
		
		Public Shared ReadOnly Property Qty As OleDbParameter
			Get
				Return New OleDbParameter("@Qty", OleDbType.Integer, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Costo As OleDbParameter
			Get
				Return New OleDbParameter("@Costo", OleDbType.Numeric, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Dscto As OleDbParameter
			Get
				Return New OleDbParameter("@Dscto", OleDbType.Numeric, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Itbis As OleDbParameter
			Get
				Return New OleDbParameter("@Itbis", OleDbType.Numeric, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Impto As OleDbParameter
			Get
				Return New OleDbParameter("@Impto", OleDbType.Numeric, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Price As OleDbParameter
			Get
				Return New OleDbParameter("@Price", OleDbType.Numeric, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Purch_unit_cost As OleDbParameter
			Get
				Return New OleDbParameter("@Purch_unit_cost", OleDbType.Numeric, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Sales_price As OleDbParameter
			Get
				Return New OleDbParameter("@Sales_price", OleDbType.Numeric, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Qty_oferta As OleDbParameter
			Get
				Return New OleDbParameter("@Qty_oferta", OleDbType.Integer, 0)
			End Get
        End Property
        Public Shared ReadOnly Property Suc_code() As OleDbParameter
            Get
                Return New OleDbParameter("@Suc_code", OleDbType.Integer, 0)
            End Get
        End Property
        Public Shared ReadOnly Property Factor() As OleDbParameter
            Get
                Return New OleDbParameter("@Factor", OleDbType.Decimal, 0)
            End Get
        End Property
    End Class
	#End Region	

	#Region "ColumnNames"
	Public class ColumnNames
		
        Public Const Entr_serial As String = "entr_serial"
        Public Const Line_no As String = "line_no"
        Public Const Whse_code As String = "whse_code"
        Public Const Item_code As String = "item_code"
        Public Const Unit_code As String = "unit_code"
        Public Const Qty As String = "qty"
        Public Const Costo As String = "costo"
        Public Const Dscto As String = "dscto"
        Public Const Itbis As String = "itbis"
        Public Const Impto As String = "impto"
        Public Const Price As String = "price"
        Public Const Purch_unit_cost As String = "purch_unit_cost"
        Public Const Sales_price As String = "sales_price"
        Public Const Qty_oferta As String = "qty_oferta"
        Public Const Suc_code As String = "Suc_code"
        Public Const Factor As String = "Factor"

		Shared Public Function ToPropertyName(ByVal columnName As String) As String

			If ht Is Nothing Then
			
				ht = new Hashtable
				
				ht(Entr_serial) = _iventrdd.PropertyNames.Entr_serial
				ht(Line_no) = _iventrdd.PropertyNames.Line_no
				ht(Whse_code) = _iventrdd.PropertyNames.Whse_code
				ht(Item_code) = _iventrdd.PropertyNames.Item_code
				ht(Unit_code) = _iventrdd.PropertyNames.Unit_code
				ht(Qty) = _iventrdd.PropertyNames.Qty
				ht(Costo) = _iventrdd.PropertyNames.Costo
				ht(Dscto) = _iventrdd.PropertyNames.Dscto
				ht(Itbis) = _iventrdd.PropertyNames.Itbis
				ht(Impto) = _iventrdd.PropertyNames.Impto
				ht(Price) = _iventrdd.PropertyNames.Price
				ht(Purch_unit_cost) = _iventrdd.PropertyNames.Purch_unit_cost
				ht(Sales_price) = _iventrdd.PropertyNames.Sales_price
                ht(Qty_oferta) = _iventrdd.PropertyNames.Qty_oferta
                ht(Suc_code) = _iventrdd.PropertyNames.suc_code
                ht(Factor) = _iventrdd.PropertyNames.factor

			End If
			
			Return CType(ht(columnName), String)
			
		End Function
		
		Shared Private ht  As Hashtable = Nothing		 
	End Class
	#End Region	
	
	#Region "PropertyNames"
	Public class PropertyNames
		
        Public Const Entr_serial As String = "Entr_serial"
        Public Const Line_no As String = "Line_no"
        Public Const Whse_code As String = "Whse_code"
        Public Const Item_code As String = "Item_code"
        Public Const Unit_code As String = "Unit_code"
        Public Const Qty As String = "Qty"
        Public Const Costo As String = "Costo"
        Public Const Dscto As String = "Dscto"
        Public Const Itbis As String = "Itbis"
        Public Const Impto As String = "Impto"
        Public Const Price As String = "Price"
        Public Const Purch_unit_cost As String = "Purch_unit_cost"
        Public Const Sales_price As String = "Sales_price"
        Public Const Qty_oferta As String = "Qty_oferta"
        Public Const Suc_code As String = "Suc_code"
        Public Const Factor As String = "Factor"

		Shared Public Function ToColumnName(ByVal propertyName As String) As String

			If ht Is Nothing Then
			
				ht = new Hashtable
				
				ht(Entr_serial) = _iventrdd.ColumnNames.Entr_serial
				ht(Line_no) = _iventrdd.ColumnNames.Line_no
				ht(Whse_code) = _iventrdd.ColumnNames.Whse_code
				ht(Item_code) = _iventrdd.ColumnNames.Item_code
				ht(Unit_code) = _iventrdd.ColumnNames.Unit_code
				ht(Qty) = _iventrdd.ColumnNames.Qty
				ht(Costo) = _iventrdd.ColumnNames.Costo
				ht(Dscto) = _iventrdd.ColumnNames.Dscto
				ht(Itbis) = _iventrdd.ColumnNames.Itbis
				ht(Impto) = _iventrdd.ColumnNames.Impto
				ht(Price) = _iventrdd.ColumnNames.Price
				ht(Purch_unit_cost) = _iventrdd.ColumnNames.Purch_unit_cost
				ht(Sales_price) = _iventrdd.ColumnNames.Sales_price
                ht(Qty_oferta) = _iventrdd.ColumnNames.Qty_oferta
                ht(Suc_code) = _iventrdd.ColumnNames.Suc_code
                ht(Factor) = _iventrdd.ColumnNames.Factor

			End If
			
			Return CType(ht(propertyName), String)
			
		End Function
		
		Shared Private ht  As Hashtable = Nothing
		
	End Class
	#End Region	
	
	#Region "StringPropertyNames"
	Public class StringPropertyNames
		
        Public Const Entr_serial As String = "s_Entr_serial"
        Public Const Line_no As String = "s_Line_no"
        Public Const Whse_code As String = "s_Whse_code"
        Public Const Item_code As String = "s_Item_code"
        Public Const Unit_code As String = "s_Unit_code"
        Public Const Qty As String = "s_Qty"
        Public Const Costo As String = "s_Costo"
        Public Const Dscto As String = "s_Dscto"
        Public Const Itbis As String = "s_Itbis"
        Public Const Impto As String = "s_Impto"
        Public Const Price As String = "s_Price"
        Public Const Purch_unit_cost As String = "s_Purch_unit_cost"
        Public Const Sales_price As String = "s_Sales_price"
        Public Const Qty_oferta As String = "s_Qty_oferta"
        Public Const Suc_code As String = "s_Suc_code"
        Public Const Factor As String = "s_Factor"

	End Class
	#End Region		
	
	#Region "Properties" 
		Public Overridable Property Entr_serial As Integer
			Get
				Return MyBase.GetInteger(ColumnNames.Entr_serial)
			End Get
			Set(ByVal Value As Integer)
				MyBase.SetInteger(ColumnNames.Entr_serial, Value)
			End Set
		End Property

		Public Overridable Property Line_no As Integer
			Get
				Return MyBase.GetInteger(ColumnNames.Line_no)
			End Get
			Set(ByVal Value As Integer)
				MyBase.SetInteger(ColumnNames.Line_no, Value)
			End Set
		End Property

		Public Overridable Property Whse_code As Integer
			Get
				Return MyBase.GetInteger(ColumnNames.Whse_code)
			End Get
			Set(ByVal Value As Integer)
				MyBase.SetInteger(ColumnNames.Whse_code, Value)
			End Set
		End Property

		Public Overridable Property Item_code As String
			Get
				Return MyBase.GetString(ColumnNames.Item_code)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Item_code, Value)
			End Set
		End Property

		Public Overridable Property Unit_code As String
			Get
				Return MyBase.GetString(ColumnNames.Unit_code)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Unit_code, Value)
			End Set
		End Property

		Public Overridable Property Qty As Integer
			Get
				Return MyBase.GetInteger(ColumnNames.Qty)
			End Get
			Set(ByVal Value As Integer)
				MyBase.SetInteger(ColumnNames.Qty, Value)
			End Set
		End Property

		Public Overridable Property Costo As Decimal
			Get
				Return MyBase.GetDecimal(ColumnNames.Costo)
			End Get
			Set(ByVal Value As Decimal)
				MyBase.SetDecimal(ColumnNames.Costo, Value)
			End Set
		End Property

		Public Overridable Property Dscto As Decimal
			Get
				Return MyBase.GetDecimal(ColumnNames.Dscto)
			End Get
			Set(ByVal Value As Decimal)
				MyBase.SetDecimal(ColumnNames.Dscto, Value)
			End Set
		End Property

		Public Overridable Property Itbis As Decimal
			Get
				Return MyBase.GetDecimal(ColumnNames.Itbis)
			End Get
			Set(ByVal Value As Decimal)
				MyBase.SetDecimal(ColumnNames.Itbis, Value)
			End Set
		End Property

		Public Overridable Property Impto As Decimal
			Get
				Return MyBase.GetDecimal(ColumnNames.Impto)
			End Get
			Set(ByVal Value As Decimal)
				MyBase.SetDecimal(ColumnNames.Impto, Value)
			End Set
		End Property

		Public Overridable Property Price As Decimal
			Get
				Return MyBase.GetDecimal(ColumnNames.Price)
			End Get
			Set(ByVal Value As Decimal)
				MyBase.SetDecimal(ColumnNames.Price, Value)
			End Set
		End Property

		Public Overridable Property Purch_unit_cost As Decimal
			Get
				Return MyBase.GetDecimal(ColumnNames.Purch_unit_cost)
			End Get
			Set(ByVal Value As Decimal)
				MyBase.SetDecimal(ColumnNames.Purch_unit_cost, Value)
			End Set
		End Property

		Public Overridable Property Sales_price As Decimal
			Get
				Return MyBase.GetDecimal(ColumnNames.Sales_price)
			End Get
			Set(ByVal Value As Decimal)
				MyBase.SetDecimal(ColumnNames.Sales_price, Value)
			End Set
		End Property

		Public Overridable Property Qty_oferta As Integer
			Get
				Return MyBase.GetInteger(ColumnNames.Qty_oferta)
			End Get
			Set(ByVal Value As Integer)
				MyBase.SetInteger(ColumnNames.Qty_oferta, Value)
			End Set
    End Property
    Public Overridable Property Suc_code() As Integer
        Get
            Return MyBase.GetInteger(ColumnNames.Suc_code)
        End Get
        Set(ByVal Value As Integer)
            MyBase.SetInteger(ColumnNames.Suc_code, Value)
        End Set
    End Property

    Public Overridable Property Factor() As Decimal
        Get
            Return MyBase.GetDecimal(ColumnNames.Factor)
        End Get
        Set(ByVal Value As Decimal)
            MyBase.SetDecimal(ColumnNames.Factor, Value)
        End Set
    End Property

#End Region
	
	#Region "String Properties" 

		Public Overridable Property s_Entr_serial As String
			Get
				If Me.IsColumnNull(ColumnNames.Entr_serial) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(ColumnNames.Entr_serial)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Entr_serial)
				Else
					Me.Entr_serial = MyBase.SetIntegerAsString(ColumnNames.Entr_serial, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Line_no As String
			Get
				If Me.IsColumnNull(ColumnNames.Line_no) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(ColumnNames.Line_no)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Line_no)
				Else
					Me.Line_no = MyBase.SetIntegerAsString(ColumnNames.Line_no, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Whse_code As String
			Get
				If Me.IsColumnNull(ColumnNames.Whse_code) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(ColumnNames.Whse_code)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Whse_code)
				Else
					Me.Whse_code = MyBase.SetIntegerAsString(ColumnNames.Whse_code, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Item_code As String
			Get
				If Me.IsColumnNull(ColumnNames.Item_code) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Item_code)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Item_code)
				Else
					Me.Item_code = MyBase.SetStringAsString(ColumnNames.Item_code, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Unit_code As String
			Get
				If Me.IsColumnNull(ColumnNames.Unit_code) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Unit_code)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Unit_code)
				Else
					Me.Unit_code = MyBase.SetStringAsString(ColumnNames.Unit_code, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Qty As String
			Get
				If Me.IsColumnNull(ColumnNames.Qty) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(ColumnNames.Qty)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Qty)
				Else
					Me.Qty = MyBase.SetIntegerAsString(ColumnNames.Qty, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Costo As String
			Get
				If Me.IsColumnNull(ColumnNames.Costo) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(ColumnNames.Costo)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Costo)
				Else
					Me.Costo = MyBase.SetDecimalAsString(ColumnNames.Costo, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Dscto As String
			Get
				If Me.IsColumnNull(ColumnNames.Dscto) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(ColumnNames.Dscto)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Dscto)
				Else
					Me.Dscto = MyBase.SetDecimalAsString(ColumnNames.Dscto, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Itbis As String
			Get
				If Me.IsColumnNull(ColumnNames.Itbis) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(ColumnNames.Itbis)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Itbis)
				Else
					Me.Itbis = MyBase.SetDecimalAsString(ColumnNames.Itbis, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Impto As String
			Get
				If Me.IsColumnNull(ColumnNames.Impto) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(ColumnNames.Impto)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Impto)
				Else
					Me.Impto = MyBase.SetDecimalAsString(ColumnNames.Impto, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Price As String
			Get
				If Me.IsColumnNull(ColumnNames.Price) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(ColumnNames.Price)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Price)
				Else
					Me.Price = MyBase.SetDecimalAsString(ColumnNames.Price, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Purch_unit_cost As String
			Get
				If Me.IsColumnNull(ColumnNames.Purch_unit_cost) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(ColumnNames.Purch_unit_cost)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Purch_unit_cost)
				Else
					Me.Purch_unit_cost = MyBase.SetDecimalAsString(ColumnNames.Purch_unit_cost, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Sales_price As String
			Get
				If Me.IsColumnNull(ColumnNames.Sales_price) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(ColumnNames.Sales_price)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Sales_price)
				Else
					Me.Sales_price = MyBase.SetDecimalAsString(ColumnNames.Sales_price, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Qty_oferta As String
			Get
				If Me.IsColumnNull(ColumnNames.Qty_oferta) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(ColumnNames.Qty_oferta)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Qty_oferta)
				Else
					Me.Qty_oferta = MyBase.SetIntegerAsString(ColumnNames.Qty_oferta, Value)
				End If
			End Set
		End Property

    Public Overridable Property s_Suc_code() As String
        Get
            If Me.IsColumnNull(ColumnNames.Suc_code) Then
                Return String.Empty
            Else
                Return MyBase.GetIntegerAsString(ColumnNames.Suc_code)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.Suc_code)
            Else
                Me.Suc_code = MyBase.SetIntegerAsString(ColumnNames.Suc_code, Value)
            End If
        End Set
    End Property
    Public Overridable Property s_Factor() As String
        Get
            If Me.IsColumnNull(ColumnNames.Factor) Then
                Return String.Empty
            Else
                Return MyBase.GetDecimalAsString(ColumnNames.Factor)
            End If
        End Get
        Set(ByVal Value As String)
            If String.Empty = Value Then
                Me.SetColumnNull(ColumnNames.Factor)
            Else
                Me.Factor = MyBase.SetDecimalAsString(Factor, Value)
            End If
        End Set
    End Property
#End Region

	#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffWhereParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffWhereParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region "TearOff's"
		Public class TearOffWhereParameter

			Public Sub New(ByVal clause As WhereClause)
				Me._clause = clause
			End Sub
		
	
			Public ReadOnly Property Entr_serial() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Entr_serial, Parameters.Entr_serial)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Line_no() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Line_no, Parameters.Line_no)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Whse_code() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Whse_code, Parameters.Whse_code)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Item_code() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Item_code, Parameters.Item_code)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Unit_code() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Unit_code, Parameters.Unit_code)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Qty() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Qty, Parameters.Qty)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Costo() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Costo, Parameters.Costo)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Dscto() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Dscto, Parameters.Dscto)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Itbis() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Itbis, Parameters.Itbis)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Impto() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Impto, Parameters.Impto)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Price() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Price, Parameters.Price)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Purch_unit_cost() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Purch_unit_cost, Parameters.Purch_unit_cost)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Sales_price() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Sales_price, Parameters.Sales_price)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Qty_oferta() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Qty_oferta, Parameters.Qty_oferta)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property
            Public ReadOnly Property Suc_code() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.Suc_code, Parameters.Suc_code)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property

            Public ReadOnly Property Factor() As WhereParameter
                Get
                    Dim where As WhereParameter = New WhereParameter(ColumnNames.Factor, Parameters.Factor)
                    Me._clause._entity.Query.AddWhereParemeter(where)
                    Return where
                End Get
            End Property
            Private _clause As WhereClause
        End Class
		#End Region	

		Public ReadOnly Property Entr_serial() As WhereParameter 
			Get
				If _Entr_serial_W Is Nothing Then
					_Entr_serial_W = TearOff.Entr_serial
				End If
				Return _Entr_serial_W
			End Get
		End Property

		Public ReadOnly Property Line_no() As WhereParameter 
			Get
				If _Line_no_W Is Nothing Then
					_Line_no_W = TearOff.Line_no
				End If
				Return _Line_no_W
			End Get
		End Property

		Public ReadOnly Property Whse_code() As WhereParameter 
			Get
				If _Whse_code_W Is Nothing Then
					_Whse_code_W = TearOff.Whse_code
				End If
				Return _Whse_code_W
			End Get
		End Property

		Public ReadOnly Property Item_code() As WhereParameter 
			Get
				If _Item_code_W Is Nothing Then
					_Item_code_W = TearOff.Item_code
				End If
				Return _Item_code_W
			End Get
		End Property

		Public ReadOnly Property Unit_code() As WhereParameter 
			Get
				If _Unit_code_W Is Nothing Then
					_Unit_code_W = TearOff.Unit_code
				End If
				Return _Unit_code_W
			End Get
		End Property

		Public ReadOnly Property Qty() As WhereParameter 
			Get
				If _Qty_W Is Nothing Then
					_Qty_W = TearOff.Qty
				End If
				Return _Qty_W
			End Get
		End Property

		Public ReadOnly Property Costo() As WhereParameter 
			Get
				If _Costo_W Is Nothing Then
					_Costo_W = TearOff.Costo
				End If
				Return _Costo_W
			End Get
		End Property

		Public ReadOnly Property Dscto() As WhereParameter 
			Get
				If _Dscto_W Is Nothing Then
					_Dscto_W = TearOff.Dscto
				End If
				Return _Dscto_W
			End Get
		End Property

		Public ReadOnly Property Itbis() As WhereParameter 
			Get
				If _Itbis_W Is Nothing Then
					_Itbis_W = TearOff.Itbis
				End If
				Return _Itbis_W
			End Get
		End Property

		Public ReadOnly Property Impto() As WhereParameter 
			Get
				If _Impto_W Is Nothing Then
					_Impto_W = TearOff.Impto
				End If
				Return _Impto_W
			End Get
		End Property

		Public ReadOnly Property Price() As WhereParameter 
			Get
				If _Price_W Is Nothing Then
					_Price_W = TearOff.Price
				End If
				Return _Price_W
			End Get
		End Property

		Public ReadOnly Property Purch_unit_cost() As WhereParameter 
			Get
				If _Purch_unit_cost_W Is Nothing Then
					_Purch_unit_cost_W = TearOff.Purch_unit_cost
				End If
				Return _Purch_unit_cost_W
			End Get
		End Property

		Public ReadOnly Property Sales_price() As WhereParameter 
			Get
				If _Sales_price_W Is Nothing Then
					_Sales_price_W = TearOff.Sales_price
				End If
				Return _Sales_price_W
			End Get
		End Property

		Public ReadOnly Property Qty_oferta() As WhereParameter 
			Get
				If _Qty_oferta_W Is Nothing Then
					_Qty_oferta_W = TearOff.Qty_oferta
				End If
				Return _Qty_oferta_W
			End Get
        End Property
        Public ReadOnly Property Suc_code() As WhereParameter
            Get
                If _Suc_code_W Is Nothing Then
                    _Suc_code_W = TearOff.Suc_code
                End If
                Return _Suc_code_W
            End Get
        End Property
        Public ReadOnly Property Factor() As WhereParameter
            Get
                If _Factor_W Is Nothing Then
                    _Factor_W = TearOff.Factor
                End If
                Return _Factor_W
            End Get
        End Property


        Private _Entr_serial_W As WhereParameter = Nothing
        Private _Line_no_W As WhereParameter = Nothing
        Private _Whse_code_W As WhereParameter = Nothing
        Private _Item_code_W As WhereParameter = Nothing
        Private _Unit_code_W As WhereParameter = Nothing
        Private _Qty_W As WhereParameter = Nothing
        Private _Costo_W As WhereParameter = Nothing
        Private _Dscto_W As WhereParameter = Nothing
        Private _Itbis_W As WhereParameter = Nothing
        Private _Impto_W As WhereParameter = Nothing
        Private _Price_W As WhereParameter = Nothing
        Private _Purch_unit_cost_W As WhereParameter = Nothing
        Private _Sales_price_W As WhereParameter = Nothing
        Private _Qty_oferta_W As WhereParameter = Nothing
        Private _Suc_code_W As WhereParameter = Nothing
        Private _Factor_W As WhereParameter = Nothing

        Public Sub WhereClauseReset()

            _Entr_serial_W = Nothing
            _Line_no_W = Nothing
            _Whse_code_W = Nothing
            _Item_code_W = Nothing
            _Unit_code_W = Nothing
            _Qty_W = Nothing
            _Costo_W = Nothing
            _Dscto_W = Nothing
            _Itbis_W = Nothing
            _Impto_W = Nothing
            _Price_W = Nothing
            _Purch_unit_cost_W = Nothing
            _Sales_price_W = Nothing
            _Qty_oferta_W = Nothing
            _Suc_code_W = Nothing
            _Factor_W = Nothing
            Me._entity.Query.FlushWhereParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffWhereParameter
    End Class

	Public ReadOnly Property Where() As WhereClause
		Get
			If _whereClause Is Nothing Then
				_whereClause = New WhereClause(Me)
			End If
	
			Return _whereClause
		End Get
	End Property
	
	Private _whereClause As WhereClause = Nothing	
#End Region	

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffAggregateParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffAggregateParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region "AggregateParameter TearOff's"
		Public class TearOffAggregateParameter

			Public Sub New(ByVal clause As AggregateClause)
				Me._clause = clause
			End Sub
		
	
		Public ReadOnly Property Entr_serial() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Entr_serial, Parameters.Entr_serial)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Line_no() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Line_no, Parameters.Line_no)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Whse_code() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Whse_code, Parameters.Whse_code)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Item_code() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Item_code, Parameters.Item_code)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Unit_code() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Unit_code, Parameters.Unit_code)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Qty() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Qty, Parameters.Qty)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Costo() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Costo, Parameters.Costo)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Dscto() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Dscto, Parameters.Dscto)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Itbis() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Itbis, Parameters.Itbis)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Impto() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Impto, Parameters.Impto)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Price() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Price, Parameters.Price)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Purch_unit_cost() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Purch_unit_cost, Parameters.Purch_unit_cost)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Sales_price() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Sales_price, Parameters.Sales_price)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Qty_oferta() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Qty_oferta, Parameters.Qty_oferta)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property
            Public ReadOnly Property Suc_code() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Suc_code, Parameters.Suc_code)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property
            Public ReadOnly Property Factor() As AggregateParameter
                Get
                    Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Factor, Parameters.Factor)
                    Me._clause._entity.Query.AddAggregateParameter(where)
                    Return where
                End Get
            End Property

            Private _clause As AggregateClause
        End Class
		#End Region	

		Public ReadOnly Property Entr_serial() As AggregateParameter 
			Get
				If _Entr_serial_W Is Nothing Then
					_Entr_serial_W = TearOff.Entr_serial
				End If
				Return _Entr_serial_W
			End Get
		End Property

		Public ReadOnly Property Line_no() As AggregateParameter 
			Get
				If _Line_no_W Is Nothing Then
					_Line_no_W = TearOff.Line_no
				End If
				Return _Line_no_W
			End Get
		End Property

		Public ReadOnly Property Whse_code() As AggregateParameter 
			Get
				If _Whse_code_W Is Nothing Then
					_Whse_code_W = TearOff.Whse_code
				End If
				Return _Whse_code_W
			End Get
		End Property

		Public ReadOnly Property Item_code() As AggregateParameter 
			Get
				If _Item_code_W Is Nothing Then
					_Item_code_W = TearOff.Item_code
				End If
				Return _Item_code_W
			End Get
		End Property

		Public ReadOnly Property Unit_code() As AggregateParameter 
			Get
				If _Unit_code_W Is Nothing Then
					_Unit_code_W = TearOff.Unit_code
				End If
				Return _Unit_code_W
			End Get
		End Property

		Public ReadOnly Property Qty() As AggregateParameter 
			Get
				If _Qty_W Is Nothing Then
					_Qty_W = TearOff.Qty
				End If
				Return _Qty_W
			End Get
		End Property

		Public ReadOnly Property Costo() As AggregateParameter 
			Get
				If _Costo_W Is Nothing Then
					_Costo_W = TearOff.Costo
				End If
				Return _Costo_W
			End Get
		End Property

		Public ReadOnly Property Dscto() As AggregateParameter 
			Get
				If _Dscto_W Is Nothing Then
					_Dscto_W = TearOff.Dscto
				End If
				Return _Dscto_W
			End Get
		End Property

		Public ReadOnly Property Itbis() As AggregateParameter 
			Get
				If _Itbis_W Is Nothing Then
					_Itbis_W = TearOff.Itbis
				End If
				Return _Itbis_W
			End Get
		End Property

		Public ReadOnly Property Impto() As AggregateParameter 
			Get
				If _Impto_W Is Nothing Then
					_Impto_W = TearOff.Impto
				End If
				Return _Impto_W
			End Get
		End Property

		Public ReadOnly Property Price() As AggregateParameter 
			Get
				If _Price_W Is Nothing Then
					_Price_W = TearOff.Price
				End If
				Return _Price_W
			End Get
		End Property

		Public ReadOnly Property Purch_unit_cost() As AggregateParameter 
			Get
				If _Purch_unit_cost_W Is Nothing Then
					_Purch_unit_cost_W = TearOff.Purch_unit_cost
				End If
				Return _Purch_unit_cost_W
			End Get
		End Property

		Public ReadOnly Property Sales_price() As AggregateParameter 
			Get
				If _Sales_price_W Is Nothing Then
					_Sales_price_W = TearOff.Sales_price
				End If
				Return _Sales_price_W
			End Get
		End Property

		Public ReadOnly Property Qty_oferta() As AggregateParameter 
			Get
				If _Qty_oferta_W Is Nothing Then
					_Qty_oferta_W = TearOff.Qty_oferta
				End If
				Return _Qty_oferta_W
			End Get
        End Property
        Public ReadOnly Property Suc_code() As AggregateParameter
            Get
                If _Suc_code_W Is Nothing Then
                    _Suc_code_W = TearOff.Suc_code
                End If
                Return _Suc_code_W
            End Get
        End Property
        Public ReadOnly Property Factor() As AggregateParameter
            Get
                If _Factor_W Is Nothing Then
                    _Factor_W = TearOff.Factor
                End If
                Return _Factor_W
            End Get
        End Property


        Private _Entr_serial_W As AggregateParameter = Nothing
        Private _Line_no_W As AggregateParameter = Nothing
        Private _Whse_code_W As AggregateParameter = Nothing
        Private _Item_code_W As AggregateParameter = Nothing
        Private _Unit_code_W As AggregateParameter = Nothing
        Private _Qty_W As AggregateParameter = Nothing
        Private _Costo_W As AggregateParameter = Nothing
        Private _Dscto_W As AggregateParameter = Nothing
        Private _Itbis_W As AggregateParameter = Nothing
        Private _Impto_W As AggregateParameter = Nothing
        Private _Price_W As AggregateParameter = Nothing
        Private _Purch_unit_cost_W As AggregateParameter = Nothing
        Private _Sales_price_W As AggregateParameter = Nothing
        Private _Qty_oferta_W As AggregateParameter = Nothing
        Private _Suc_code_W As AggregateParameter = Nothing
        Private _Factor_W As AggregateParameter = Nothing

        Public Sub AggregateClauseReset()

            _Entr_serial_W = Nothing
            _Line_no_W = Nothing
            _Whse_code_W = Nothing
            _Item_code_W = Nothing
            _Unit_code_W = Nothing
            _Qty_W = Nothing
            _Costo_W = Nothing
            _Dscto_W = Nothing
            _Itbis_W = Nothing
            _Impto_W = Nothing
            _Price_W = Nothing
            _Purch_unit_cost_W = Nothing
            _Sales_price_W = Nothing
            _Qty_oferta_W = Nothing
            _Suc_code_W = Nothing
            _Factor_W = Nothing
            Me._entity.Query.FlushAggregateParameters()

        End Sub

        Private _entity As BusinessEntity
        Private _tearOff As TearOffAggregateParameter
    End Class

	Public ReadOnly Property Aggregate() As AggregateClause
		Get
			If _aggregateClause Is Nothing Then
				_aggregateClause = New AggregateClause(Me)
			End If
	
			Return _aggregateClause
		End Get
	End Property
	
	Private _aggregateClause As AggregateClause = Nothing	
#End Region	

	Protected Overrides Function GetInsertCommand() As IDbCommand
	
		Dim cmd As OleDbCommand = New OleDbCommand
		cmd.CommandType = CommandType.StoredProcedure
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_iventrddInsert]" 
	    
		CreateParameters(cmd)
		    
		Return cmd 

  	End Function
	
	Protected Overrides Function GetUpdateCommand() As IDbCommand
	
		Dim cmd As OleDbCommand = New OleDbCommand
		cmd.CommandType = CommandType.StoredProcedure    
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_iventrddUpdate]" 
		
		CreateParameters(cmd) 
		    
		Return cmd
	
	End Function	
	
	Protected Overrides Function GetDeleteCommand() As IDbCommand
	
		Dim cmd As OleDbCommand = New OleDbCommand
		cmd.CommandType = CommandType.StoredProcedure    
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_iventrddDelete]" 
		
		Dim p As OleDbParameter
		p = cmd.Parameters.Add(Parameters.Entr_serial)
		p.SourceColumn = ColumnNames.Entr_serial
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Line_no)
		p.SourceColumn = ColumnNames.Line_no
		p.SourceVersion = DataRowVersion.Current

  
		Return cmd
	
	End Function	
	
	Private Sub CreateParameters(ByVal cmd As OleDbCommand)
	
		Dim p As OleDbParameter
		p = cmd.Parameters.Add(Parameters.Entr_serial)
		p.SourceColumn = ColumnNames.Entr_serial
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Line_no)
		p.SourceColumn = ColumnNames.Line_no
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Whse_code)
		p.SourceColumn = ColumnNames.Whse_code
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Item_code)
		p.SourceColumn = ColumnNames.Item_code
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Unit_code)
		p.SourceColumn = ColumnNames.Unit_code
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Qty)
		p.SourceColumn = ColumnNames.Qty
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Costo)
		p.SourceColumn = ColumnNames.Costo
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Dscto)
		p.SourceColumn = ColumnNames.Dscto
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Itbis)
		p.SourceColumn = ColumnNames.Itbis
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Impto)
		p.SourceColumn = ColumnNames.Impto
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Price)
		p.SourceColumn = ColumnNames.Price
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Purch_unit_cost)
		p.SourceColumn = ColumnNames.Purch_unit_cost
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Sales_price)
		p.SourceColumn = ColumnNames.Sales_price
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Qty_oferta)
		p.SourceColumn = ColumnNames.Qty_oferta
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.Suc_code)
        p.SourceColumn = ColumnNames.Suc_code
        p.SourceVersion = DataRowVersion.Current

        p = cmd.Parameters.Add(Parameters.Factor)
        p.SourceColumn = ColumnNames.Factor
        p.SourceVersion = DataRowVersion.Current

	End Sub	

End Class

