
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class OleDbEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.2.0.7)

Imports System
Imports System.Data
Imports System.Data.OleDb
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Public MustInherit Class _ivunitd
	Inherits OleDbEntity

		Public Sub New() 
			Me.QuerySource = "ivunitd"
			Me.MappingName = "ivunitd"
		End Sub

	'=================================================================
	'  Public Overrides Sub AddNew()
	'=================================================================
	'
	'=================================================================
	Public Overrides Sub AddNew()
		MyBase.AddNew()
				
	End Sub
	
	Public Overrides Sub FlushData()
		Me._whereClause = nothing
		Me._aggregateClause = nothing		
		MyBase.FlushData()
	End Sub
	
	
	Public Overrides Function GetAutoKeyColumn() As String
			Return ""
	End Function
	
	'=================================================================
	'  	Public Function LoadAll() As Boolean
	'=================================================================
	'  Loads all of the records in the database, and sets the currentRow to the first row
	'=================================================================
	Public Function LoadAll() As Boolean
	
		Dim parameters As ListDictionary = Nothing
		
		
    	Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_ivunitdLoadAll]", parameters)
		
	End Function

	'=================================================================
	' Public Overridable Function LoadByPrimaryKey()  As Boolean
	'=================================================================
	'  Loads a single row of via the primary key
	'=================================================================
	Public Overridable Function LoadByPrimaryKey(ByVal Unit_code As String, ByVal Item_code As String) As Boolean

		Dim parameters As ListDictionary = New ListDictionary()
		parameters.Add(_ivunitd.Parameters.Unit_code, Unit_code)

parameters.Add(_ivunitd.Parameters.Item_code, Item_code)

		
		Return MyBase.LoadFromSql("[" + Me.SchemaStoredProcedure + "proc_ivunitdLoadByPrimaryKey]", parameters)

	End Function

	#Region "Parameters"
	Protected class Parameters 
		
		Public Shared ReadOnly Property Unit_code As OleDbParameter
			Get
				Return New OleDbParameter("@Unit_code", OleDbType.Char, 5)
			End Get
		End Property
		
		Public Shared ReadOnly Property Item_code As OleDbParameter
			Get
				Return New OleDbParameter("@Item_code", OleDbType.VarChar, 10)
			End Get
		End Property
		
		Public Shared ReadOnly Property Factor As OleDbParameter
			Get
				Return New OleDbParameter("@Factor", OleDbType.Numeric, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Unit_type As OleDbParameter
			Get
				Return New OleDbParameter("@Unit_type", OleDbType.Integer, 0)
			End Get
		End Property
		
		Public Shared ReadOnly Property Unit_min As OleDbParameter
			Get
				Return New OleDbParameter("@Unit_min", OleDbType.Integer, 0)
			End Get
		End Property
		
	End Class
	#End Region	

	#Region "ColumnNames"
	Public class ColumnNames
		
        Public Const Unit_code As String = "unit_code"
        Public Const Item_code As String = "item_code"
        Public Const Factor As String = "factor"
        Public Const Unit_type As String = "unit_type"
        Public Const Unit_min As String = "unit_min"

		Shared Public Function ToPropertyName(ByVal columnName As String) As String

			If ht Is Nothing Then
			
				ht = new Hashtable
				
				ht(Unit_code) = _ivunitd.PropertyNames.Unit_code
				ht(Item_code) = _ivunitd.PropertyNames.Item_code
				ht(Factor) = _ivunitd.PropertyNames.Factor
				ht(Unit_type) = _ivunitd.PropertyNames.Unit_type
				ht(Unit_min) = _ivunitd.PropertyNames.Unit_min

			End If
			
			Return CType(ht(columnName), String)
			
		End Function
		
		Shared Private ht  As Hashtable = Nothing		 
	End Class
	#End Region	
	
	#Region "PropertyNames"
	Public class PropertyNames
		
        Public Const Unit_code As String = "Unit_code"
        Public Const Item_code As String = "Item_code"
        Public Const Factor As String = "Factor"
        Public Const Unit_type As String = "Unit_type"
        Public Const Unit_min As String = "Unit_min"

		Shared Public Function ToColumnName(ByVal propertyName As String) As String

			If ht Is Nothing Then
			
				ht = new Hashtable
				
				ht(Unit_code) = _ivunitd.ColumnNames.Unit_code
				ht(Item_code) = _ivunitd.ColumnNames.Item_code
				ht(Factor) = _ivunitd.ColumnNames.Factor
				ht(Unit_type) = _ivunitd.ColumnNames.Unit_type
				ht(Unit_min) = _ivunitd.ColumnNames.Unit_min

			End If
			
			Return CType(ht(propertyName), String)
			
		End Function
		
		Shared Private ht  As Hashtable = Nothing
		
	End Class
	#End Region	
	
	#Region "StringPropertyNames"
	Public class StringPropertyNames
		
        Public Const Unit_code As String = "s_Unit_code"
        Public Const Item_code As String = "s_Item_code"
        Public Const Factor As String = "s_Factor"
        Public Const Unit_type As String = "s_Unit_type"
        Public Const Unit_min As String = "s_Unit_min"

	End Class
	#End Region		
	
	#Region "Properties" 
		Public Overridable Property Unit_code As String
			Get
				Return MyBase.GetString(ColumnNames.Unit_code)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Unit_code, Value)
			End Set
		End Property

		Public Overridable Property Item_code As String
			Get
				Return MyBase.GetString(ColumnNames.Item_code)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.Item_code, Value)
			End Set
		End Property

		Public Overridable Property Factor As Decimal
			Get
				Return MyBase.GetDecimal(ColumnNames.Factor)
			End Get
			Set(ByVal Value As Decimal)
				MyBase.SetDecimal(ColumnNames.Factor, Value)
			End Set
		End Property

		Public Overridable Property Unit_type As Integer
			Get
				Return MyBase.GetInteger(ColumnNames.Unit_type)
			End Get
			Set(ByVal Value As Integer)
				MyBase.SetInteger(ColumnNames.Unit_type, Value)
			End Set
		End Property

		Public Overridable Property Unit_min As Integer
			Get
				Return MyBase.GetInteger(ColumnNames.Unit_min)
			End Get
			Set(ByVal Value As Integer)
				MyBase.SetInteger(ColumnNames.Unit_min, Value)
			End Set
		End Property


	#End Region  
	
	#Region "String Properties" 

		Public Overridable Property s_Unit_code As String
			Get
				If Me.IsColumnNull(ColumnNames.Unit_code) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Unit_code)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Unit_code)
				Else
					Me.Unit_code = MyBase.SetStringAsString(ColumnNames.Unit_code, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Item_code As String
			Get
				If Me.IsColumnNull(ColumnNames.Item_code) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.Item_code)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Item_code)
				Else
					Me.Item_code = MyBase.SetStringAsString(ColumnNames.Item_code, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Factor As String
			Get
				If Me.IsColumnNull(ColumnNames.Factor) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(ColumnNames.Factor)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Factor)
				Else
					Me.Factor = MyBase.SetDecimalAsString(ColumnNames.Factor, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Unit_type As String
			Get
				If Me.IsColumnNull(ColumnNames.Unit_type) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(ColumnNames.Unit_type)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Unit_type)
				Else
					Me.Unit_type = MyBase.SetIntegerAsString(ColumnNames.Unit_type, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_Unit_min As String
			Get
				If Me.IsColumnNull(ColumnNames.Unit_min) Then
					Return String.Empty
				Else
					Return MyBase.GetIntegerAsString(ColumnNames.Unit_min)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.Unit_min)
				Else
					Me.Unit_min = MyBase.SetIntegerAsString(ColumnNames.Unit_min, Value)
				End If
			End Set
		End Property


	#End Region  	

	#Region "Where Clause"
    Public Class WhereClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffWhereParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffWhereParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region "TearOff's"
		Public class TearOffWhereParameter

			Public Sub New(ByVal clause As WhereClause)
				Me._clause = clause
			End Sub
		
	
			Public ReadOnly Property Unit_code() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Unit_code, Parameters.Unit_code)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Item_code() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Item_code, Parameters.Item_code)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Factor() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Factor, Parameters.Factor)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Unit_type() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Unit_type, Parameters.Unit_type)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property

			Public ReadOnly Property Unit_min() As WhereParameter
				Get
					Dim where As WhereParameter = New WhereParameter(ColumnNames.Unit_min, Parameters.Unit_min)
					Me._clause._entity.Query.AddWhereParemeter(where)
					Return where
				End Get
			End Property


			Private _clause as WhereClause
		End Class
		#End Region	

		Public ReadOnly Property Unit_code() As WhereParameter 
			Get
				If _Unit_code_W Is Nothing Then
					_Unit_code_W = TearOff.Unit_code
				End If
				Return _Unit_code_W
			End Get
		End Property

		Public ReadOnly Property Item_code() As WhereParameter 
			Get
				If _Item_code_W Is Nothing Then
					_Item_code_W = TearOff.Item_code
				End If
				Return _Item_code_W
			End Get
		End Property

		Public ReadOnly Property Factor() As WhereParameter 
			Get
				If _Factor_W Is Nothing Then
					_Factor_W = TearOff.Factor
				End If
				Return _Factor_W
			End Get
		End Property

		Public ReadOnly Property Unit_type() As WhereParameter 
			Get
				If _Unit_type_W Is Nothing Then
					_Unit_type_W = TearOff.Unit_type
				End If
				Return _Unit_type_W
			End Get
		End Property

		Public ReadOnly Property Unit_min() As WhereParameter 
			Get
				If _Unit_min_W Is Nothing Then
					_Unit_min_W = TearOff.Unit_min
				End If
				Return _Unit_min_W
			End Get
		End Property

		Private _Unit_code_W As WhereParameter = Nothing
		Private _Item_code_W As WhereParameter = Nothing
		Private _Factor_W As WhereParameter = Nothing
		Private _Unit_type_W As WhereParameter = Nothing
		Private _Unit_min_W As WhereParameter = Nothing

			Public Sub WhereClauseReset()

			_Unit_code_W = Nothing
			_Item_code_W = Nothing
			_Factor_W = Nothing
			_Unit_type_W = Nothing
			_Unit_min_W = Nothing
				Me._entity.Query.FlushWhereParameters()

			End Sub
	
		Private _entity As BusinessEntity
		Private _tearOff As TearOffWhereParameter
    End Class	

	Public ReadOnly Property Where() As WhereClause
		Get
			If _whereClause Is Nothing Then
				_whereClause = New WhereClause(Me)
			End If
	
			Return _whereClause
		End Get
	End Property
	
	Private _whereClause As WhereClause = Nothing	
#End Region	

#Region "Aggregate Clause"
    Public Class AggregateClause

        Public Sub New(ByVal entity As BusinessEntity)
            Me._entity = entity
        End Sub
		
		Public ReadOnly Property TearOff As TearOffAggregateParameter
			Get
				If _tearOff Is Nothing Then
					_tearOff = new TearOffAggregateParameter(Me)
				End If

				Return _tearOff
			End Get
		End Property

		#Region "AggregateParameter TearOff's"
		Public class TearOffAggregateParameter

			Public Sub New(ByVal clause As AggregateClause)
				Me._clause = clause
			End Sub
		
	
		Public ReadOnly Property Unit_code() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Unit_code, Parameters.Unit_code)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Item_code() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Item_code, Parameters.Item_code)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Factor() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Factor, Parameters.Factor)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Unit_type() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Unit_type, Parameters.Unit_type)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property

		Public ReadOnly Property Unit_min() As AggregateParameter
			Get
				Dim where As AggregateParameter = New AggregateParameter(ColumnNames.Unit_min, Parameters.Unit_min)
				Me._clause._entity.Query.AddAggregateParameter(where)
				Return where
			End Get
		End Property


			Private _clause as AggregateClause
		End Class
		#End Region	

		Public ReadOnly Property Unit_code() As AggregateParameter 
			Get
				If _Unit_code_W Is Nothing Then
					_Unit_code_W = TearOff.Unit_code
				End If
				Return _Unit_code_W
			End Get
		End Property

		Public ReadOnly Property Item_code() As AggregateParameter 
			Get
				If _Item_code_W Is Nothing Then
					_Item_code_W = TearOff.Item_code
				End If
				Return _Item_code_W
			End Get
		End Property

		Public ReadOnly Property Factor() As AggregateParameter 
			Get
				If _Factor_W Is Nothing Then
					_Factor_W = TearOff.Factor
				End If
				Return _Factor_W
			End Get
		End Property

		Public ReadOnly Property Unit_type() As AggregateParameter 
			Get
				If _Unit_type_W Is Nothing Then
					_Unit_type_W = TearOff.Unit_type
				End If
				Return _Unit_type_W
			End Get
		End Property

		Public ReadOnly Property Unit_min() As AggregateParameter 
			Get
				If _Unit_min_W Is Nothing Then
					_Unit_min_W = TearOff.Unit_min
				End If
				Return _Unit_min_W
			End Get
		End Property

		Private _Unit_code_W As AggregateParameter = Nothing
		Private _Item_code_W As AggregateParameter = Nothing
		Private _Factor_W As AggregateParameter = Nothing
		Private _Unit_type_W As AggregateParameter = Nothing
		Private _Unit_min_W As AggregateParameter = Nothing

		Public Sub AggregateClauseReset()

		_Unit_code_W = Nothing
		_Item_code_W = Nothing
		_Factor_W = Nothing
		_Unit_type_W = Nothing
		_Unit_min_W = Nothing
			Me._entity.Query.FlushAggregateParameters()

		End Sub
	
		Private _entity As BusinessEntity
		Private _tearOff As TearOffAggregateParameter
    End Class	

	Public ReadOnly Property Aggregate() As AggregateClause
		Get
			If _aggregateClause Is Nothing Then
				_aggregateClause = New AggregateClause(Me)
			End If
	
			Return _aggregateClause
		End Get
	End Property
	
	Private _aggregateClause As AggregateClause = Nothing	
#End Region	

	Protected Overrides Function GetInsertCommand() As IDbCommand
	
		Dim cmd As OleDbCommand = New OleDbCommand
		cmd.CommandType = CommandType.StoredProcedure
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_ivunitdInsert]" 
	    
		CreateParameters(cmd)
		    
		Return cmd 

  	End Function
	
	Protected Overrides Function GetUpdateCommand() As IDbCommand
	
		Dim cmd As OleDbCommand = New OleDbCommand
		cmd.CommandType = CommandType.StoredProcedure    
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_ivunitdUpdate]" 
		
		CreateParameters(cmd) 
		    
		Return cmd
	
	End Function	
	
	Protected Overrides Function GetDeleteCommand() As IDbCommand
	
		Dim cmd As OleDbCommand = New OleDbCommand
		cmd.CommandType = CommandType.StoredProcedure    
		cmd.CommandText = "[" + Me.SchemaStoredProcedure + "proc_ivunitdDelete]" 
		
		Dim p As OleDbParameter
		p = cmd.Parameters.Add(Parameters.Unit_code)
		p.SourceColumn = ColumnNames.Unit_code
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Item_code)
		p.SourceColumn = ColumnNames.Item_code
		p.SourceVersion = DataRowVersion.Current

  
		Return cmd
	
	End Function	
	
	Private Sub CreateParameters(ByVal cmd As OleDbCommand)
	
		Dim p As OleDbParameter
		p = cmd.Parameters.Add(Parameters.Unit_code)
		p.SourceColumn = ColumnNames.Unit_code
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Item_code)
		p.SourceColumn = ColumnNames.Item_code
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Factor)
		p.SourceColumn = ColumnNames.Factor
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Unit_type)
		p.SourceColumn = ColumnNames.Unit_type
		p.SourceVersion = DataRowVersion.Current

		p = cmd.Parameters.Add(Parameters.Unit_min)
		p.SourceColumn = ColumnNames.Unit_min
		p.SourceVersion = DataRowVersion.Current


	End Sub	

End Class

